
Hello_world.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000165c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800182c  0800182c  0001182c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001978  08001978  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08001978  08001978  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001978  08001978  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001978  08001978  00011978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800197c  0800197c  0001197c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08001980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200000a0  08001a20  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08001a20  00020210  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ca  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000af0  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003d9  00000000  00000000  00020bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  00020fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000dd  00000000  00000000  00021118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002bb2  00000000  00000000  000211f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015d9  00000000  00000000  00023da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009825  00000000  00000000  00025380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000eb4  00000000  00000000  0002eba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0002fa5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001814 	.word	0x08001814

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	08001814 	.word	0x08001814

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <array_fill_numbers>:
int numbers[] = { 456,345,678,567,890,456,3456,123,765,456,896,456,678,987,000,145,90};

int  someData ;

void array_fill_numbers(int pNumbers[], unsigned int len)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]

    for ( unsigned int i = 0 ; i < len ; i++)
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	e015      	b.n	80002ec <array_fill_numbers+0x3c>
    {
        pNumbers[i] = rand() % 1000;
 80002c0:	f000 fa34 	bl	800072c <rand>
 80002c4:	4602      	mov	r2, r0
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	6879      	ldr	r1, [r7, #4]
 80002cc:	4419      	add	r1, r3
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <array_fill_numbers+0x50>)
 80002d0:	fb83 0302 	smull	r0, r3, r3, r2
 80002d4:	1198      	asrs	r0, r3, #6
 80002d6:	17d3      	asrs	r3, r2, #31
 80002d8:	1ac3      	subs	r3, r0, r3
 80002da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002de:	fb00 f303 	mul.w	r3, r0, r3
 80002e2:	1ad3      	subs	r3, r2, r3
 80002e4:	600b      	str	r3, [r1, #0]
    for ( unsigned int i = 0 ; i < len ; i++)
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	3301      	adds	r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	68fa      	ldr	r2, [r7, #12]
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d3e5      	bcc.n	80002c0 <array_fill_numbers+0x10>
    }

}
 80002f4:	bf00      	nop
 80002f6:	bf00      	nop
 80002f8:	3710      	adds	r7, #16
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	10624dd3 	.word	0x10624dd3

08000304 <display_numbers>:

void display_numbers(int *pNumbers, unsigned int len, char *pMessage)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	607a      	str	r2, [r7, #4]
	someData=10;
 8000310:	4b10      	ldr	r3, [pc, #64]	; (8000354 <display_numbers+0x50>)
 8000312:	220a      	movs	r2, #10
 8000314:	601a      	str	r2, [r3, #0]
    printf("%s",pMessage);
 8000316:	6879      	ldr	r1, [r7, #4]
 8000318:	480f      	ldr	r0, [pc, #60]	; (8000358 <display_numbers+0x54>)
 800031a:	f000 faf5 	bl	8000908 <iprintf>

    for (unsigned i = 0 ; i < len ; i++)
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]
 8000322:	e00b      	b.n	800033c <display_numbers+0x38>
    {
        printf("%5d  ",pNumbers[i]);
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	4413      	add	r3, r2
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4619      	mov	r1, r3
 8000330:	480a      	ldr	r0, [pc, #40]	; (800035c <display_numbers+0x58>)
 8000332:	f000 fae9 	bl	8000908 <iprintf>
    for (unsigned i = 0 ; i < len ; i++)
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	3301      	adds	r3, #1
 800033a:	617b      	str	r3, [r7, #20]
 800033c:	697a      	ldr	r2, [r7, #20]
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	429a      	cmp	r2, r3
 8000342:	d3ef      	bcc.n	8000324 <display_numbers+0x20>
    }

    printf("\n");
 8000344:	200a      	movs	r0, #10
 8000346:	f000 faf1 	bl	800092c <putchar>
}
 800034a:	bf00      	nop
 800034c:	3718      	adds	r7, #24
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	200000bc 	.word	0x200000bc
 8000358:	0800182c 	.word	0x0800182c
 800035c:	08001830 	.word	0x08001830

08000360 <swap_numbers>:


void swap_numbers(int *x,int *y)
{
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	6039      	str	r1, [r7, #0]
	//void (*FuncPtr)(void)=(void*)0x20000008;
	//FuncPtr();
     int temp=*x;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	60fb      	str	r3, [r7, #12]
     *x=*y;
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	601a      	str	r2, [r3, #0]
     *y=temp;
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	68fa      	ldr	r2, [r7, #12]
 800037c:	601a      	str	r2, [r3, #0]

}
 800037e:	bf00      	nop
 8000380:	3714      	adds	r7, #20
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <bubble_sort>:


void bubble_sort(int *pNumbers , unsigned int len)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]

    int i,j,flag=0;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]

    for(i=0;i<len-1;i++)
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
 800039a:	e02f      	b.n	80003fc <bubble_sort+0x74>
    {
        flag=0;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]

        for(j=0;j<len-1-i;j++)
 80003a0:	2300      	movs	r3, #0
 80003a2:	613b      	str	r3, [r7, #16]
 80003a4:	e01d      	b.n	80003e2 <bubble_sort+0x5a>
        {
            if(pNumbers[j] > pNumbers[j+1])
 80003a6:	693b      	ldr	r3, [r7, #16]
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	4413      	add	r3, r2
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	3301      	adds	r3, #1
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	6879      	ldr	r1, [r7, #4]
 80003b8:	440b      	add	r3, r1
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	429a      	cmp	r2, r3
 80003be:	dd0d      	ble.n	80003dc <bubble_sort+0x54>
            {
                swap_numbers(&pNumbers[j],&pNumbers[j+1]);
 80003c0:	693b      	ldr	r3, [r7, #16]
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	18d0      	adds	r0, r2, r3
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	3301      	adds	r3, #1
 80003cc:	009b      	lsls	r3, r3, #2
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	4413      	add	r3, r2
 80003d2:	4619      	mov	r1, r3
 80003d4:	f7ff ffc4 	bl	8000360 <swap_numbers>
                flag=1;
 80003d8:	2301      	movs	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
        for(j=0;j<len-1-i;j++)
 80003dc:	693b      	ldr	r3, [r7, #16]
 80003de:	3301      	adds	r3, #1
 80003e0:	613b      	str	r3, [r7, #16]
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	683a      	ldr	r2, [r7, #0]
 80003e6:	1ad3      	subs	r3, r2, r3
 80003e8:	1e5a      	subs	r2, r3, #1
 80003ea:	693b      	ldr	r3, [r7, #16]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d8da      	bhi.n	80003a6 <bubble_sort+0x1e>
            }
        }

        if(flag==0)
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d008      	beq.n	8000408 <bubble_sort+0x80>
    for(i=0;i<len-1;i++)
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	3301      	adds	r3, #1
 80003fa:	617b      	str	r3, [r7, #20]
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	1e5a      	subs	r2, r3, #1
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	429a      	cmp	r2, r3
 8000404:	d8ca      	bhi.n	800039c <bubble_sort+0x14>
            break;
    }
}
 8000406:	e000      	b.n	800040a <bubble_sort+0x82>
            break;
 8000408:	bf00      	nop
}
 800040a:	bf00      	nop
 800040c:	3718      	adds	r7, #24
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <insertion_sort>:

void insertion_sort(int *pNumbers , unsigned int len)
{
 8000412:	b480      	push	{r7}
 8000414:	b087      	sub	sp, #28
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
 800041a:	6039      	str	r1, [r7, #0]

     int i,j,num;

     for(i=1 ; i<len ; i++)
 800041c:	2301      	movs	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	e02c      	b.n	800047c <insertion_sort+0x6a>
     {
         j=i-1;
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	3b01      	subs	r3, #1
 8000426:	613b      	str	r3, [r7, #16]

         num = pNumbers[i];
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	4413      	add	r3, r2
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	60fb      	str	r3, [r7, #12]

         while( (j>-1) && (pNumbers[j] > num) )
 8000434:	e00d      	b.n	8000452 <insertion_sort+0x40>
         {
             pNumbers[j+1] = pNumbers[j];
 8000436:	693b      	ldr	r3, [r7, #16]
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	441a      	add	r2, r3
 800043e:	693b      	ldr	r3, [r7, #16]
 8000440:	3301      	adds	r3, #1
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	6879      	ldr	r1, [r7, #4]
 8000446:	440b      	add	r3, r1
 8000448:	6812      	ldr	r2, [r2, #0]
 800044a:	601a      	str	r2, [r3, #0]
             j--;
 800044c:	693b      	ldr	r3, [r7, #16]
 800044e:	3b01      	subs	r3, #1
 8000450:	613b      	str	r3, [r7, #16]
         while( (j>-1) && (pNumbers[j] > num) )
 8000452:	693b      	ldr	r3, [r7, #16]
 8000454:	2b00      	cmp	r3, #0
 8000456:	db07      	blt.n	8000468 <insertion_sort+0x56>
 8000458:	693b      	ldr	r3, [r7, #16]
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	4413      	add	r3, r2
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	429a      	cmp	r2, r3
 8000466:	dbe6      	blt.n	8000436 <insertion_sort+0x24>
         }

         pNumbers[j+1]=num;
 8000468:	693b      	ldr	r3, [r7, #16]
 800046a:	3301      	adds	r3, #1
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	4413      	add	r3, r2
 8000472:	68fa      	ldr	r2, [r7, #12]
 8000474:	601a      	str	r2, [r3, #0]
     for(i=1 ; i<len ; i++)
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	3301      	adds	r3, #1
 800047a:	617b      	str	r3, [r7, #20]
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	683a      	ldr	r2, [r7, #0]
 8000480:	429a      	cmp	r2, r3
 8000482:	d8ce      	bhi.n	8000422 <insertion_sort+0x10>
     }


}
 8000484:	bf00      	nop
 8000486:	bf00      	nop
 8000488:	371c      	adds	r7, #28
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <main>:



int main()
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0

    unsigned int len = sizeof(numbers)/sizeof(int);
 8000496:	2311      	movs	r3, #17
 8000498:	607b      	str	r3, [r7, #4]

    printf("Hello World\r\n");
 800049a:	4816      	ldr	r0, [pc, #88]	; (80004f4 <main+0x64>)
 800049c:	f000 faa2 	bl	80009e4 <puts>

    array_fill_numbers(numbers,len);
 80004a0:	6879      	ldr	r1, [r7, #4]
 80004a2:	4815      	ldr	r0, [pc, #84]	; (80004f8 <main+0x68>)
 80004a4:	f7ff ff04 	bl	80002b0 <array_fill_numbers>

    display_numbers(numbers,len,"B-unsorted array :");
 80004a8:	4a14      	ldr	r2, [pc, #80]	; (80004fc <main+0x6c>)
 80004aa:	6879      	ldr	r1, [r7, #4]
 80004ac:	4812      	ldr	r0, [pc, #72]	; (80004f8 <main+0x68>)
 80004ae:	f7ff ff29 	bl	8000304 <display_numbers>

    bubble_sort(numbers,len);
 80004b2:	6879      	ldr	r1, [r7, #4]
 80004b4:	4810      	ldr	r0, [pc, #64]	; (80004f8 <main+0x68>)
 80004b6:	f7ff ff67 	bl	8000388 <bubble_sort>

    display_numbers(numbers,len,"B-sorted array   :");
 80004ba:	4a11      	ldr	r2, [pc, #68]	; (8000500 <main+0x70>)
 80004bc:	6879      	ldr	r1, [r7, #4]
 80004be:	480e      	ldr	r0, [pc, #56]	; (80004f8 <main+0x68>)
 80004c0:	f7ff ff20 	bl	8000304 <display_numbers>

    array_fill_numbers(numbers,len);
 80004c4:	6879      	ldr	r1, [r7, #4]
 80004c6:	480c      	ldr	r0, [pc, #48]	; (80004f8 <main+0x68>)
 80004c8:	f7ff fef2 	bl	80002b0 <array_fill_numbers>

    display_numbers(numbers,len,"I-unsorted array :");
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <main+0x74>)
 80004ce:	6879      	ldr	r1, [r7, #4]
 80004d0:	4809      	ldr	r0, [pc, #36]	; (80004f8 <main+0x68>)
 80004d2:	f7ff ff17 	bl	8000304 <display_numbers>

    insertion_sort(numbers,len);
 80004d6:	6879      	ldr	r1, [r7, #4]
 80004d8:	4807      	ldr	r0, [pc, #28]	; (80004f8 <main+0x68>)
 80004da:	f7ff ff9a 	bl	8000412 <insertion_sort>

    display_numbers(numbers,len,"I-sorted array   :");
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <main+0x78>)
 80004e0:	6879      	ldr	r1, [r7, #4]
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <main+0x68>)
 80004e4:	f7ff ff0e 	bl	8000304 <display_numbers>



    return 0;
 80004e8:	2300      	movs	r3, #0
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	08001838 	.word	0x08001838
 80004f8:	20000000 	.word	0x20000000
 80004fc:	08001848 	.word	0x08001848
 8000500:	0800185c 	.word	0x0800185c
 8000504:	08001870 	.word	0x08001870
 8000508:	08001884 	.word	0x08001884

0800050c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <ITM_SendChar+0x44>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <ITM_SendChar+0x44>)
 800051c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000520:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <ITM_SendChar+0x48>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <ITM_SendChar+0x48>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800052e:	bf00      	nop
 8000530:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f8      	beq.n	8000530 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800053e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	6013      	str	r3, [r2, #0]
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	e000edfc 	.word	0xe000edfc
 8000554:	e0000e00 	.word	0xe0000e00

08000558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  return 1;
 800055c:	2301      	movs	r3, #1
}
 800055e:	4618      	mov	r0, r3
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr

08000566 <_kill>:

int _kill(int pid, int sig)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b082      	sub	sp, #8
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
 800056e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000570:	f000 fb66 	bl	8000c40 <__errno>
 8000574:	4603      	mov	r3, r0
 8000576:	2216      	movs	r2, #22
 8000578:	601a      	str	r2, [r3, #0]
  return -1;
 800057a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800057e:	4618      	mov	r0, r3
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <_exit>:

void _exit (int status)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800058e:	f04f 31ff 	mov.w	r1, #4294967295
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f7ff ffe7 	bl	8000566 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000598:	e7fe      	b.n	8000598 <_exit+0x12>

0800059a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b086      	sub	sp, #24
 800059e:	af00      	add	r7, sp, #0
 80005a0:	60f8      	str	r0, [r7, #12]
 80005a2:	60b9      	str	r1, [r7, #8]
 80005a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	e00a      	b.n	80005c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005ac:	f3af 8000 	nop.w
 80005b0:	4601      	mov	r1, r0
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	1c5a      	adds	r2, r3, #1
 80005b6:	60ba      	str	r2, [r7, #8]
 80005b8:	b2ca      	uxtb	r2, r1
 80005ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	3301      	adds	r3, #1
 80005c0:	617b      	str	r3, [r7, #20]
 80005c2:	697a      	ldr	r2, [r7, #20]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	dbf0      	blt.n	80005ac <_read+0x12>
  }

  return len;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	e009      	b.n	80005fa <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	1c5a      	adds	r2, r3, #1
 80005ea:	60ba      	str	r2, [r7, #8]
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff8c 	bl	800050c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	3301      	adds	r3, #1
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	697a      	ldr	r2, [r7, #20]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	429a      	cmp	r2, r3
 8000600:	dbf1      	blt.n	80005e6 <_write+0x12>
  }
  return len;
 8000602:	687b      	ldr	r3, [r7, #4]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3718      	adds	r7, #24
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <_close>:

int _close(int file)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000632:	605a      	str	r2, [r3, #4]
  return 0;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <_isatty>:

int _isatty(int file)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000648:	2301      	movs	r3, #1
}
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000674:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <_sbrk+0x5c>)
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <_sbrk+0x60>)
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <_sbrk+0x64>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d102      	bne.n	800068e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <_sbrk+0x64>)
 800068a:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <_sbrk+0x68>)
 800068c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <_sbrk+0x64>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	429a      	cmp	r2, r3
 800069a:	d207      	bcs.n	80006ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800069c:	f000 fad0 	bl	8000c40 <__errno>
 80006a0:	4603      	mov	r3, r0
 80006a2:	220c      	movs	r2, #12
 80006a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	e009      	b.n	80006c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <_sbrk+0x64>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006b2:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <_sbrk+0x64>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	4a05      	ldr	r2, [pc, #20]	; (80006d0 <_sbrk+0x64>)
 80006bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006be:	68fb      	ldr	r3, [r7, #12]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20020000 	.word	0x20020000
 80006cc:	00000400 	.word	0x00000400
 80006d0:	200000c0 	.word	0x200000c0
 80006d4:	20000210 	.word	0x20000210

080006d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e2:	490d      	ldr	r1, [pc, #52]	; (8000718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e4:	4a0d      	ldr	r2, [pc, #52]	; (800071c <LoopForever+0xe>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e8:	e002      	b.n	80006f0 <LoopCopyDataInit>

080006ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ee:	3304      	adds	r3, #4

080006f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f4:	d3f9      	bcc.n	80006ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f6:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f8:	4c0a      	ldr	r4, [pc, #40]	; (8000724 <LoopForever+0x16>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006fc:	e001      	b.n	8000702 <LoopFillZerobss>

080006fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000700:	3204      	adds	r2, #4

08000702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000704:	d3fb      	bcc.n	80006fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000706:	f000 faa1 	bl	8000c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800070a:	f7ff fec1 	bl	8000490 <main>

0800070e <LoopForever>:

LoopForever:
  b LoopForever
 800070e:	e7fe      	b.n	800070e <LoopForever>
  ldr   r0, =_estack
 8000710:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000718:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800071c:	08001980 	.word	0x08001980
  ldr r2, =_sbss
 8000720:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000724:	20000210 	.word	0x20000210

08000728 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC_IRQHandler>
	...

0800072c <rand>:
 800072c:	4b16      	ldr	r3, [pc, #88]	; (8000788 <rand+0x5c>)
 800072e:	b510      	push	{r4, lr}
 8000730:	681c      	ldr	r4, [r3, #0]
 8000732:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000734:	b9b3      	cbnz	r3, 8000764 <rand+0x38>
 8000736:	2018      	movs	r0, #24
 8000738:	f000 fb16 	bl	8000d68 <malloc>
 800073c:	4602      	mov	r2, r0
 800073e:	6320      	str	r0, [r4, #48]	; 0x30
 8000740:	b920      	cbnz	r0, 800074c <rand+0x20>
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <rand+0x60>)
 8000744:	4812      	ldr	r0, [pc, #72]	; (8000790 <rand+0x64>)
 8000746:	2152      	movs	r1, #82	; 0x52
 8000748:	f000 faa6 	bl	8000c98 <__assert_func>
 800074c:	4911      	ldr	r1, [pc, #68]	; (8000794 <rand+0x68>)
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <rand+0x6c>)
 8000750:	e9c0 1300 	strd	r1, r3, [r0]
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <rand+0x70>)
 8000756:	6083      	str	r3, [r0, #8]
 8000758:	230b      	movs	r3, #11
 800075a:	8183      	strh	r3, [r0, #12]
 800075c:	2100      	movs	r1, #0
 800075e:	2001      	movs	r0, #1
 8000760:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000764:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000766:	480e      	ldr	r0, [pc, #56]	; (80007a0 <rand+0x74>)
 8000768:	690b      	ldr	r3, [r1, #16]
 800076a:	694c      	ldr	r4, [r1, #20]
 800076c:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <rand+0x78>)
 800076e:	4358      	muls	r0, r3
 8000770:	fb02 0004 	mla	r0, r2, r4, r0
 8000774:	fba3 3202 	umull	r3, r2, r3, r2
 8000778:	3301      	adds	r3, #1
 800077a:	eb40 0002 	adc.w	r0, r0, r2
 800077e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8000782:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000786:	bd10      	pop	{r4, pc}
 8000788:	2000009c 	.word	0x2000009c
 800078c:	08001897 	.word	0x08001897
 8000790:	080018ae 	.word	0x080018ae
 8000794:	abcd330e 	.word	0xabcd330e
 8000798:	e66d1234 	.word	0xe66d1234
 800079c:	0005deec 	.word	0x0005deec
 80007a0:	5851f42d 	.word	0x5851f42d
 80007a4:	4c957f2d 	.word	0x4c957f2d

080007a8 <std>:
 80007a8:	2300      	movs	r3, #0
 80007aa:	b510      	push	{r4, lr}
 80007ac:	4604      	mov	r4, r0
 80007ae:	e9c0 3300 	strd	r3, r3, [r0]
 80007b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007b6:	6083      	str	r3, [r0, #8]
 80007b8:	8181      	strh	r1, [r0, #12]
 80007ba:	6643      	str	r3, [r0, #100]	; 0x64
 80007bc:	81c2      	strh	r2, [r0, #14]
 80007be:	6183      	str	r3, [r0, #24]
 80007c0:	4619      	mov	r1, r3
 80007c2:	2208      	movs	r2, #8
 80007c4:	305c      	adds	r0, #92	; 0x5c
 80007c6:	f000 f9ed 	bl	8000ba4 <memset>
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <std+0x38>)
 80007cc:	6263      	str	r3, [r4, #36]	; 0x24
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <std+0x3c>)
 80007d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <std+0x40>)
 80007d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007d6:	4b05      	ldr	r3, [pc, #20]	; (80007ec <std+0x44>)
 80007d8:	6224      	str	r4, [r4, #32]
 80007da:	6323      	str	r3, [r4, #48]	; 0x30
 80007dc:	bd10      	pop	{r4, pc}
 80007de:	bf00      	nop
 80007e0:	080009f5 	.word	0x080009f5
 80007e4:	08000a17 	.word	0x08000a17
 80007e8:	08000a4f 	.word	0x08000a4f
 80007ec:	08000a73 	.word	0x08000a73

080007f0 <stdio_exit_handler>:
 80007f0:	4a02      	ldr	r2, [pc, #8]	; (80007fc <stdio_exit_handler+0xc>)
 80007f2:	4903      	ldr	r1, [pc, #12]	; (8000800 <stdio_exit_handler+0x10>)
 80007f4:	4803      	ldr	r0, [pc, #12]	; (8000804 <stdio_exit_handler+0x14>)
 80007f6:	f000 b869 	b.w	80008cc <_fwalk_sglue>
 80007fa:	bf00      	nop
 80007fc:	20000044 	.word	0x20000044
 8000800:	08001579 	.word	0x08001579
 8000804:	20000050 	.word	0x20000050

08000808 <cleanup_stdio>:
 8000808:	6841      	ldr	r1, [r0, #4]
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <cleanup_stdio+0x34>)
 800080c:	4299      	cmp	r1, r3
 800080e:	b510      	push	{r4, lr}
 8000810:	4604      	mov	r4, r0
 8000812:	d001      	beq.n	8000818 <cleanup_stdio+0x10>
 8000814:	f000 feb0 	bl	8001578 <_fflush_r>
 8000818:	68a1      	ldr	r1, [r4, #8]
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <cleanup_stdio+0x38>)
 800081c:	4299      	cmp	r1, r3
 800081e:	d002      	beq.n	8000826 <cleanup_stdio+0x1e>
 8000820:	4620      	mov	r0, r4
 8000822:	f000 fea9 	bl	8001578 <_fflush_r>
 8000826:	68e1      	ldr	r1, [r4, #12]
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <cleanup_stdio+0x3c>)
 800082a:	4299      	cmp	r1, r3
 800082c:	d004      	beq.n	8000838 <cleanup_stdio+0x30>
 800082e:	4620      	mov	r0, r4
 8000830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000834:	f000 bea0 	b.w	8001578 <_fflush_r>
 8000838:	bd10      	pop	{r4, pc}
 800083a:	bf00      	nop
 800083c:	200000c4 	.word	0x200000c4
 8000840:	2000012c 	.word	0x2000012c
 8000844:	20000194 	.word	0x20000194

08000848 <global_stdio_init.part.0>:
 8000848:	b510      	push	{r4, lr}
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <global_stdio_init.part.0+0x30>)
 800084c:	4c0b      	ldr	r4, [pc, #44]	; (800087c <global_stdio_init.part.0+0x34>)
 800084e:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <global_stdio_init.part.0+0x38>)
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	4620      	mov	r0, r4
 8000854:	2200      	movs	r2, #0
 8000856:	2104      	movs	r1, #4
 8000858:	f7ff ffa6 	bl	80007a8 <std>
 800085c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000860:	2201      	movs	r2, #1
 8000862:	2109      	movs	r1, #9
 8000864:	f7ff ffa0 	bl	80007a8 <std>
 8000868:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800086c:	2202      	movs	r2, #2
 800086e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000872:	2112      	movs	r1, #18
 8000874:	f7ff bf98 	b.w	80007a8 <std>
 8000878:	200001fc 	.word	0x200001fc
 800087c:	200000c4 	.word	0x200000c4
 8000880:	080007f1 	.word	0x080007f1

08000884 <__sfp_lock_acquire>:
 8000884:	4801      	ldr	r0, [pc, #4]	; (800088c <__sfp_lock_acquire+0x8>)
 8000886:	f000 ba05 	b.w	8000c94 <__retarget_lock_acquire_recursive>
 800088a:	bf00      	nop
 800088c:	20000205 	.word	0x20000205

08000890 <__sfp_lock_release>:
 8000890:	4801      	ldr	r0, [pc, #4]	; (8000898 <__sfp_lock_release+0x8>)
 8000892:	f000 ba00 	b.w	8000c96 <__retarget_lock_release_recursive>
 8000896:	bf00      	nop
 8000898:	20000205 	.word	0x20000205

0800089c <__sinit>:
 800089c:	b510      	push	{r4, lr}
 800089e:	4604      	mov	r4, r0
 80008a0:	f7ff fff0 	bl	8000884 <__sfp_lock_acquire>
 80008a4:	6a23      	ldr	r3, [r4, #32]
 80008a6:	b11b      	cbz	r3, 80008b0 <__sinit+0x14>
 80008a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008ac:	f7ff bff0 	b.w	8000890 <__sfp_lock_release>
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <__sinit+0x28>)
 80008b2:	6223      	str	r3, [r4, #32]
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__sinit+0x2c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1f5      	bne.n	80008a8 <__sinit+0xc>
 80008bc:	f7ff ffc4 	bl	8000848 <global_stdio_init.part.0>
 80008c0:	e7f2      	b.n	80008a8 <__sinit+0xc>
 80008c2:	bf00      	nop
 80008c4:	08000809 	.word	0x08000809
 80008c8:	200001fc 	.word	0x200001fc

080008cc <_fwalk_sglue>:
 80008cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008d0:	4607      	mov	r7, r0
 80008d2:	4688      	mov	r8, r1
 80008d4:	4614      	mov	r4, r2
 80008d6:	2600      	movs	r6, #0
 80008d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008dc:	f1b9 0901 	subs.w	r9, r9, #1
 80008e0:	d505      	bpl.n	80008ee <_fwalk_sglue+0x22>
 80008e2:	6824      	ldr	r4, [r4, #0]
 80008e4:	2c00      	cmp	r4, #0
 80008e6:	d1f7      	bne.n	80008d8 <_fwalk_sglue+0xc>
 80008e8:	4630      	mov	r0, r6
 80008ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008ee:	89ab      	ldrh	r3, [r5, #12]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d907      	bls.n	8000904 <_fwalk_sglue+0x38>
 80008f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008f8:	3301      	adds	r3, #1
 80008fa:	d003      	beq.n	8000904 <_fwalk_sglue+0x38>
 80008fc:	4629      	mov	r1, r5
 80008fe:	4638      	mov	r0, r7
 8000900:	47c0      	blx	r8
 8000902:	4306      	orrs	r6, r0
 8000904:	3568      	adds	r5, #104	; 0x68
 8000906:	e7e9      	b.n	80008dc <_fwalk_sglue+0x10>

08000908 <iprintf>:
 8000908:	b40f      	push	{r0, r1, r2, r3}
 800090a:	b507      	push	{r0, r1, r2, lr}
 800090c:	4906      	ldr	r1, [pc, #24]	; (8000928 <iprintf+0x20>)
 800090e:	ab04      	add	r3, sp, #16
 8000910:	6808      	ldr	r0, [r1, #0]
 8000912:	f853 2b04 	ldr.w	r2, [r3], #4
 8000916:	6881      	ldr	r1, [r0, #8]
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	f000 fb01 	bl	8000f20 <_vfiprintf_r>
 800091e:	b003      	add	sp, #12
 8000920:	f85d eb04 	ldr.w	lr, [sp], #4
 8000924:	b004      	add	sp, #16
 8000926:	4770      	bx	lr
 8000928:	2000009c 	.word	0x2000009c

0800092c <putchar>:
 800092c:	4b02      	ldr	r3, [pc, #8]	; (8000938 <putchar+0xc>)
 800092e:	4601      	mov	r1, r0
 8000930:	6818      	ldr	r0, [r3, #0]
 8000932:	6882      	ldr	r2, [r0, #8]
 8000934:	f000 bebc 	b.w	80016b0 <_putc_r>
 8000938:	2000009c 	.word	0x2000009c

0800093c <_puts_r>:
 800093c:	6a03      	ldr	r3, [r0, #32]
 800093e:	b570      	push	{r4, r5, r6, lr}
 8000940:	6884      	ldr	r4, [r0, #8]
 8000942:	4605      	mov	r5, r0
 8000944:	460e      	mov	r6, r1
 8000946:	b90b      	cbnz	r3, 800094c <_puts_r+0x10>
 8000948:	f7ff ffa8 	bl	800089c <__sinit>
 800094c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800094e:	07db      	lsls	r3, r3, #31
 8000950:	d405      	bmi.n	800095e <_puts_r+0x22>
 8000952:	89a3      	ldrh	r3, [r4, #12]
 8000954:	0598      	lsls	r0, r3, #22
 8000956:	d402      	bmi.n	800095e <_puts_r+0x22>
 8000958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800095a:	f000 f99b 	bl	8000c94 <__retarget_lock_acquire_recursive>
 800095e:	89a3      	ldrh	r3, [r4, #12]
 8000960:	0719      	lsls	r1, r3, #28
 8000962:	d513      	bpl.n	800098c <_puts_r+0x50>
 8000964:	6923      	ldr	r3, [r4, #16]
 8000966:	b18b      	cbz	r3, 800098c <_puts_r+0x50>
 8000968:	3e01      	subs	r6, #1
 800096a:	68a3      	ldr	r3, [r4, #8]
 800096c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000970:	3b01      	subs	r3, #1
 8000972:	60a3      	str	r3, [r4, #8]
 8000974:	b9e9      	cbnz	r1, 80009b2 <_puts_r+0x76>
 8000976:	2b00      	cmp	r3, #0
 8000978:	da2e      	bge.n	80009d8 <_puts_r+0x9c>
 800097a:	4622      	mov	r2, r4
 800097c:	210a      	movs	r1, #10
 800097e:	4628      	mov	r0, r5
 8000980:	f000 f87b 	bl	8000a7a <__swbuf_r>
 8000984:	3001      	adds	r0, #1
 8000986:	d007      	beq.n	8000998 <_puts_r+0x5c>
 8000988:	250a      	movs	r5, #10
 800098a:	e007      	b.n	800099c <_puts_r+0x60>
 800098c:	4621      	mov	r1, r4
 800098e:	4628      	mov	r0, r5
 8000990:	f000 f8b0 	bl	8000af4 <__swsetup_r>
 8000994:	2800      	cmp	r0, #0
 8000996:	d0e7      	beq.n	8000968 <_puts_r+0x2c>
 8000998:	f04f 35ff 	mov.w	r5, #4294967295
 800099c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800099e:	07da      	lsls	r2, r3, #31
 80009a0:	d405      	bmi.n	80009ae <_puts_r+0x72>
 80009a2:	89a3      	ldrh	r3, [r4, #12]
 80009a4:	059b      	lsls	r3, r3, #22
 80009a6:	d402      	bmi.n	80009ae <_puts_r+0x72>
 80009a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009aa:	f000 f974 	bl	8000c96 <__retarget_lock_release_recursive>
 80009ae:	4628      	mov	r0, r5
 80009b0:	bd70      	pop	{r4, r5, r6, pc}
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	da04      	bge.n	80009c0 <_puts_r+0x84>
 80009b6:	69a2      	ldr	r2, [r4, #24]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	dc06      	bgt.n	80009ca <_puts_r+0x8e>
 80009bc:	290a      	cmp	r1, #10
 80009be:	d004      	beq.n	80009ca <_puts_r+0x8e>
 80009c0:	6823      	ldr	r3, [r4, #0]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	6022      	str	r2, [r4, #0]
 80009c6:	7019      	strb	r1, [r3, #0]
 80009c8:	e7cf      	b.n	800096a <_puts_r+0x2e>
 80009ca:	4622      	mov	r2, r4
 80009cc:	4628      	mov	r0, r5
 80009ce:	f000 f854 	bl	8000a7a <__swbuf_r>
 80009d2:	3001      	adds	r0, #1
 80009d4:	d1c9      	bne.n	800096a <_puts_r+0x2e>
 80009d6:	e7df      	b.n	8000998 <_puts_r+0x5c>
 80009d8:	6823      	ldr	r3, [r4, #0]
 80009da:	250a      	movs	r5, #10
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	6022      	str	r2, [r4, #0]
 80009e0:	701d      	strb	r5, [r3, #0]
 80009e2:	e7db      	b.n	800099c <_puts_r+0x60>

080009e4 <puts>:
 80009e4:	4b02      	ldr	r3, [pc, #8]	; (80009f0 <puts+0xc>)
 80009e6:	4601      	mov	r1, r0
 80009e8:	6818      	ldr	r0, [r3, #0]
 80009ea:	f7ff bfa7 	b.w	800093c <_puts_r>
 80009ee:	bf00      	nop
 80009f0:	2000009c 	.word	0x2000009c

080009f4 <__sread>:
 80009f4:	b510      	push	{r4, lr}
 80009f6:	460c      	mov	r4, r1
 80009f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009fc:	f000 f8fc 	bl	8000bf8 <_read_r>
 8000a00:	2800      	cmp	r0, #0
 8000a02:	bfab      	itete	ge
 8000a04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000a06:	89a3      	ldrhlt	r3, [r4, #12]
 8000a08:	181b      	addge	r3, r3, r0
 8000a0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000a0e:	bfac      	ite	ge
 8000a10:	6563      	strge	r3, [r4, #84]	; 0x54
 8000a12:	81a3      	strhlt	r3, [r4, #12]
 8000a14:	bd10      	pop	{r4, pc}

08000a16 <__swrite>:
 8000a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a1a:	461f      	mov	r7, r3
 8000a1c:	898b      	ldrh	r3, [r1, #12]
 8000a1e:	05db      	lsls	r3, r3, #23
 8000a20:	4605      	mov	r5, r0
 8000a22:	460c      	mov	r4, r1
 8000a24:	4616      	mov	r6, r2
 8000a26:	d505      	bpl.n	8000a34 <__swrite+0x1e>
 8000a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f000 f8d0 	bl	8000bd4 <_lseek_r>
 8000a34:	89a3      	ldrh	r3, [r4, #12]
 8000a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a3e:	81a3      	strh	r3, [r4, #12]
 8000a40:	4632      	mov	r2, r6
 8000a42:	463b      	mov	r3, r7
 8000a44:	4628      	mov	r0, r5
 8000a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a4a:	f000 b8e7 	b.w	8000c1c <_write_r>

08000a4e <__sseek>:
 8000a4e:	b510      	push	{r4, lr}
 8000a50:	460c      	mov	r4, r1
 8000a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a56:	f000 f8bd 	bl	8000bd4 <_lseek_r>
 8000a5a:	1c43      	adds	r3, r0, #1
 8000a5c:	89a3      	ldrh	r3, [r4, #12]
 8000a5e:	bf15      	itete	ne
 8000a60:	6560      	strne	r0, [r4, #84]	; 0x54
 8000a62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000a66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000a6a:	81a3      	strheq	r3, [r4, #12]
 8000a6c:	bf18      	it	ne
 8000a6e:	81a3      	strhne	r3, [r4, #12]
 8000a70:	bd10      	pop	{r4, pc}

08000a72 <__sclose>:
 8000a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a76:	f000 b89d 	b.w	8000bb4 <_close_r>

08000a7a <__swbuf_r>:
 8000a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7c:	460e      	mov	r6, r1
 8000a7e:	4614      	mov	r4, r2
 8000a80:	4605      	mov	r5, r0
 8000a82:	b118      	cbz	r0, 8000a8c <__swbuf_r+0x12>
 8000a84:	6a03      	ldr	r3, [r0, #32]
 8000a86:	b90b      	cbnz	r3, 8000a8c <__swbuf_r+0x12>
 8000a88:	f7ff ff08 	bl	800089c <__sinit>
 8000a8c:	69a3      	ldr	r3, [r4, #24]
 8000a8e:	60a3      	str	r3, [r4, #8]
 8000a90:	89a3      	ldrh	r3, [r4, #12]
 8000a92:	071a      	lsls	r2, r3, #28
 8000a94:	d525      	bpl.n	8000ae2 <__swbuf_r+0x68>
 8000a96:	6923      	ldr	r3, [r4, #16]
 8000a98:	b31b      	cbz	r3, 8000ae2 <__swbuf_r+0x68>
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	6922      	ldr	r2, [r4, #16]
 8000a9e:	1a98      	subs	r0, r3, r2
 8000aa0:	6963      	ldr	r3, [r4, #20]
 8000aa2:	b2f6      	uxtb	r6, r6
 8000aa4:	4283      	cmp	r3, r0
 8000aa6:	4637      	mov	r7, r6
 8000aa8:	dc04      	bgt.n	8000ab4 <__swbuf_r+0x3a>
 8000aaa:	4621      	mov	r1, r4
 8000aac:	4628      	mov	r0, r5
 8000aae:	f000 fd63 	bl	8001578 <_fflush_r>
 8000ab2:	b9e0      	cbnz	r0, 8000aee <__swbuf_r+0x74>
 8000ab4:	68a3      	ldr	r3, [r4, #8]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	60a3      	str	r3, [r4, #8]
 8000aba:	6823      	ldr	r3, [r4, #0]
 8000abc:	1c5a      	adds	r2, r3, #1
 8000abe:	6022      	str	r2, [r4, #0]
 8000ac0:	701e      	strb	r6, [r3, #0]
 8000ac2:	6962      	ldr	r2, [r4, #20]
 8000ac4:	1c43      	adds	r3, r0, #1
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d004      	beq.n	8000ad4 <__swbuf_r+0x5a>
 8000aca:	89a3      	ldrh	r3, [r4, #12]
 8000acc:	07db      	lsls	r3, r3, #31
 8000ace:	d506      	bpl.n	8000ade <__swbuf_r+0x64>
 8000ad0:	2e0a      	cmp	r6, #10
 8000ad2:	d104      	bne.n	8000ade <__swbuf_r+0x64>
 8000ad4:	4621      	mov	r1, r4
 8000ad6:	4628      	mov	r0, r5
 8000ad8:	f000 fd4e 	bl	8001578 <_fflush_r>
 8000adc:	b938      	cbnz	r0, 8000aee <__swbuf_r+0x74>
 8000ade:	4638      	mov	r0, r7
 8000ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ae2:	4621      	mov	r1, r4
 8000ae4:	4628      	mov	r0, r5
 8000ae6:	f000 f805 	bl	8000af4 <__swsetup_r>
 8000aea:	2800      	cmp	r0, #0
 8000aec:	d0d5      	beq.n	8000a9a <__swbuf_r+0x20>
 8000aee:	f04f 37ff 	mov.w	r7, #4294967295
 8000af2:	e7f4      	b.n	8000ade <__swbuf_r+0x64>

08000af4 <__swsetup_r>:
 8000af4:	b538      	push	{r3, r4, r5, lr}
 8000af6:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <__swsetup_r+0xac>)
 8000af8:	4605      	mov	r5, r0
 8000afa:	6818      	ldr	r0, [r3, #0]
 8000afc:	460c      	mov	r4, r1
 8000afe:	b118      	cbz	r0, 8000b08 <__swsetup_r+0x14>
 8000b00:	6a03      	ldr	r3, [r0, #32]
 8000b02:	b90b      	cbnz	r3, 8000b08 <__swsetup_r+0x14>
 8000b04:	f7ff feca 	bl	800089c <__sinit>
 8000b08:	89a3      	ldrh	r3, [r4, #12]
 8000b0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b0e:	0718      	lsls	r0, r3, #28
 8000b10:	d422      	bmi.n	8000b58 <__swsetup_r+0x64>
 8000b12:	06d9      	lsls	r1, r3, #27
 8000b14:	d407      	bmi.n	8000b26 <__swsetup_r+0x32>
 8000b16:	2309      	movs	r3, #9
 8000b18:	602b      	str	r3, [r5, #0]
 8000b1a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000b1e:	81a3      	strh	r3, [r4, #12]
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	e034      	b.n	8000b90 <__swsetup_r+0x9c>
 8000b26:	0758      	lsls	r0, r3, #29
 8000b28:	d512      	bpl.n	8000b50 <__swsetup_r+0x5c>
 8000b2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b2c:	b141      	cbz	r1, 8000b40 <__swsetup_r+0x4c>
 8000b2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b32:	4299      	cmp	r1, r3
 8000b34:	d002      	beq.n	8000b3c <__swsetup_r+0x48>
 8000b36:	4628      	mov	r0, r5
 8000b38:	f000 f8cc 	bl	8000cd4 <_free_r>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	6363      	str	r3, [r4, #52]	; 0x34
 8000b40:	89a3      	ldrh	r3, [r4, #12]
 8000b42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000b46:	81a3      	strh	r3, [r4, #12]
 8000b48:	2300      	movs	r3, #0
 8000b4a:	6063      	str	r3, [r4, #4]
 8000b4c:	6923      	ldr	r3, [r4, #16]
 8000b4e:	6023      	str	r3, [r4, #0]
 8000b50:	89a3      	ldrh	r3, [r4, #12]
 8000b52:	f043 0308 	orr.w	r3, r3, #8
 8000b56:	81a3      	strh	r3, [r4, #12]
 8000b58:	6923      	ldr	r3, [r4, #16]
 8000b5a:	b94b      	cbnz	r3, 8000b70 <__swsetup_r+0x7c>
 8000b5c:	89a3      	ldrh	r3, [r4, #12]
 8000b5e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b66:	d003      	beq.n	8000b70 <__swsetup_r+0x7c>
 8000b68:	4621      	mov	r1, r4
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	f000 fd64 	bl	8001638 <__smakebuf_r>
 8000b70:	89a0      	ldrh	r0, [r4, #12]
 8000b72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b76:	f010 0301 	ands.w	r3, r0, #1
 8000b7a:	d00a      	beq.n	8000b92 <__swsetup_r+0x9e>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60a3      	str	r3, [r4, #8]
 8000b80:	6963      	ldr	r3, [r4, #20]
 8000b82:	425b      	negs	r3, r3
 8000b84:	61a3      	str	r3, [r4, #24]
 8000b86:	6923      	ldr	r3, [r4, #16]
 8000b88:	b943      	cbnz	r3, 8000b9c <__swsetup_r+0xa8>
 8000b8a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000b8e:	d1c4      	bne.n	8000b1a <__swsetup_r+0x26>
 8000b90:	bd38      	pop	{r3, r4, r5, pc}
 8000b92:	0781      	lsls	r1, r0, #30
 8000b94:	bf58      	it	pl
 8000b96:	6963      	ldrpl	r3, [r4, #20]
 8000b98:	60a3      	str	r3, [r4, #8]
 8000b9a:	e7f4      	b.n	8000b86 <__swsetup_r+0x92>
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	e7f7      	b.n	8000b90 <__swsetup_r+0x9c>
 8000ba0:	2000009c 	.word	0x2000009c

08000ba4 <memset>:
 8000ba4:	4402      	add	r2, r0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d100      	bne.n	8000bae <memset+0xa>
 8000bac:	4770      	bx	lr
 8000bae:	f803 1b01 	strb.w	r1, [r3], #1
 8000bb2:	e7f9      	b.n	8000ba8 <memset+0x4>

08000bb4 <_close_r>:
 8000bb4:	b538      	push	{r3, r4, r5, lr}
 8000bb6:	4d06      	ldr	r5, [pc, #24]	; (8000bd0 <_close_r+0x1c>)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	4604      	mov	r4, r0
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	602b      	str	r3, [r5, #0]
 8000bc0:	f7ff fd24 	bl	800060c <_close>
 8000bc4:	1c43      	adds	r3, r0, #1
 8000bc6:	d102      	bne.n	8000bce <_close_r+0x1a>
 8000bc8:	682b      	ldr	r3, [r5, #0]
 8000bca:	b103      	cbz	r3, 8000bce <_close_r+0x1a>
 8000bcc:	6023      	str	r3, [r4, #0]
 8000bce:	bd38      	pop	{r3, r4, r5, pc}
 8000bd0:	20000200 	.word	0x20000200

08000bd4 <_lseek_r>:
 8000bd4:	b538      	push	{r3, r4, r5, lr}
 8000bd6:	4d07      	ldr	r5, [pc, #28]	; (8000bf4 <_lseek_r+0x20>)
 8000bd8:	4604      	mov	r4, r0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	4611      	mov	r1, r2
 8000bde:	2200      	movs	r2, #0
 8000be0:	602a      	str	r2, [r5, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	f7ff fd36 	bl	8000654 <_lseek>
 8000be8:	1c43      	adds	r3, r0, #1
 8000bea:	d102      	bne.n	8000bf2 <_lseek_r+0x1e>
 8000bec:	682b      	ldr	r3, [r5, #0]
 8000bee:	b103      	cbz	r3, 8000bf2 <_lseek_r+0x1e>
 8000bf0:	6023      	str	r3, [r4, #0]
 8000bf2:	bd38      	pop	{r3, r4, r5, pc}
 8000bf4:	20000200 	.word	0x20000200

08000bf8 <_read_r>:
 8000bf8:	b538      	push	{r3, r4, r5, lr}
 8000bfa:	4d07      	ldr	r5, [pc, #28]	; (8000c18 <_read_r+0x20>)
 8000bfc:	4604      	mov	r4, r0
 8000bfe:	4608      	mov	r0, r1
 8000c00:	4611      	mov	r1, r2
 8000c02:	2200      	movs	r2, #0
 8000c04:	602a      	str	r2, [r5, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	f7ff fcc7 	bl	800059a <_read>
 8000c0c:	1c43      	adds	r3, r0, #1
 8000c0e:	d102      	bne.n	8000c16 <_read_r+0x1e>
 8000c10:	682b      	ldr	r3, [r5, #0]
 8000c12:	b103      	cbz	r3, 8000c16 <_read_r+0x1e>
 8000c14:	6023      	str	r3, [r4, #0]
 8000c16:	bd38      	pop	{r3, r4, r5, pc}
 8000c18:	20000200 	.word	0x20000200

08000c1c <_write_r>:
 8000c1c:	b538      	push	{r3, r4, r5, lr}
 8000c1e:	4d07      	ldr	r5, [pc, #28]	; (8000c3c <_write_r+0x20>)
 8000c20:	4604      	mov	r4, r0
 8000c22:	4608      	mov	r0, r1
 8000c24:	4611      	mov	r1, r2
 8000c26:	2200      	movs	r2, #0
 8000c28:	602a      	str	r2, [r5, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	f7ff fcd2 	bl	80005d4 <_write>
 8000c30:	1c43      	adds	r3, r0, #1
 8000c32:	d102      	bne.n	8000c3a <_write_r+0x1e>
 8000c34:	682b      	ldr	r3, [r5, #0]
 8000c36:	b103      	cbz	r3, 8000c3a <_write_r+0x1e>
 8000c38:	6023      	str	r3, [r4, #0]
 8000c3a:	bd38      	pop	{r3, r4, r5, pc}
 8000c3c:	20000200 	.word	0x20000200

08000c40 <__errno>:
 8000c40:	4b01      	ldr	r3, [pc, #4]	; (8000c48 <__errno+0x8>)
 8000c42:	6818      	ldr	r0, [r3, #0]
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	2000009c 	.word	0x2000009c

08000c4c <__libc_init_array>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	4d0d      	ldr	r5, [pc, #52]	; (8000c84 <__libc_init_array+0x38>)
 8000c50:	4c0d      	ldr	r4, [pc, #52]	; (8000c88 <__libc_init_array+0x3c>)
 8000c52:	1b64      	subs	r4, r4, r5
 8000c54:	10a4      	asrs	r4, r4, #2
 8000c56:	2600      	movs	r6, #0
 8000c58:	42a6      	cmp	r6, r4
 8000c5a:	d109      	bne.n	8000c70 <__libc_init_array+0x24>
 8000c5c:	4d0b      	ldr	r5, [pc, #44]	; (8000c8c <__libc_init_array+0x40>)
 8000c5e:	4c0c      	ldr	r4, [pc, #48]	; (8000c90 <__libc_init_array+0x44>)
 8000c60:	f000 fdd8 	bl	8001814 <_init>
 8000c64:	1b64      	subs	r4, r4, r5
 8000c66:	10a4      	asrs	r4, r4, #2
 8000c68:	2600      	movs	r6, #0
 8000c6a:	42a6      	cmp	r6, r4
 8000c6c:	d105      	bne.n	8000c7a <__libc_init_array+0x2e>
 8000c6e:	bd70      	pop	{r4, r5, r6, pc}
 8000c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c74:	4798      	blx	r3
 8000c76:	3601      	adds	r6, #1
 8000c78:	e7ee      	b.n	8000c58 <__libc_init_array+0xc>
 8000c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c7e:	4798      	blx	r3
 8000c80:	3601      	adds	r6, #1
 8000c82:	e7f2      	b.n	8000c6a <__libc_init_array+0x1e>
 8000c84:	08001978 	.word	0x08001978
 8000c88:	08001978 	.word	0x08001978
 8000c8c:	08001978 	.word	0x08001978
 8000c90:	0800197c 	.word	0x0800197c

08000c94 <__retarget_lock_acquire_recursive>:
 8000c94:	4770      	bx	lr

08000c96 <__retarget_lock_release_recursive>:
 8000c96:	4770      	bx	lr

08000c98 <__assert_func>:
 8000c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000c9a:	4614      	mov	r4, r2
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <__assert_func+0x2c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4605      	mov	r5, r0
 8000ca4:	68d8      	ldr	r0, [r3, #12]
 8000ca6:	b14c      	cbz	r4, 8000cbc <__assert_func+0x24>
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <__assert_func+0x30>)
 8000caa:	9100      	str	r1, [sp, #0]
 8000cac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000cb0:	4906      	ldr	r1, [pc, #24]	; (8000ccc <__assert_func+0x34>)
 8000cb2:	462b      	mov	r3, r5
 8000cb4:	f000 fc88 	bl	80015c8 <fiprintf>
 8000cb8:	f000 fd60 	bl	800177c <abort>
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__assert_func+0x38>)
 8000cbe:	461c      	mov	r4, r3
 8000cc0:	e7f3      	b.n	8000caa <__assert_func+0x12>
 8000cc2:	bf00      	nop
 8000cc4:	2000009c 	.word	0x2000009c
 8000cc8:	08001906 	.word	0x08001906
 8000ccc:	08001913 	.word	0x08001913
 8000cd0:	08001941 	.word	0x08001941

08000cd4 <_free_r>:
 8000cd4:	b538      	push	{r3, r4, r5, lr}
 8000cd6:	4605      	mov	r5, r0
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d041      	beq.n	8000d60 <_free_r+0x8c>
 8000cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ce0:	1f0c      	subs	r4, r1, #4
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bfb8      	it	lt
 8000ce6:	18e4      	addlt	r4, r4, r3
 8000ce8:	f000 f8e6 	bl	8000eb8 <__malloc_lock>
 8000cec:	4a1d      	ldr	r2, [pc, #116]	; (8000d64 <_free_r+0x90>)
 8000cee:	6813      	ldr	r3, [r2, #0]
 8000cf0:	b933      	cbnz	r3, 8000d00 <_free_r+0x2c>
 8000cf2:	6063      	str	r3, [r4, #4]
 8000cf4:	6014      	str	r4, [r2, #0]
 8000cf6:	4628      	mov	r0, r5
 8000cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cfc:	f000 b8e2 	b.w	8000ec4 <__malloc_unlock>
 8000d00:	42a3      	cmp	r3, r4
 8000d02:	d908      	bls.n	8000d16 <_free_r+0x42>
 8000d04:	6820      	ldr	r0, [r4, #0]
 8000d06:	1821      	adds	r1, r4, r0
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	bf01      	itttt	eq
 8000d0c:	6819      	ldreq	r1, [r3, #0]
 8000d0e:	685b      	ldreq	r3, [r3, #4]
 8000d10:	1809      	addeq	r1, r1, r0
 8000d12:	6021      	streq	r1, [r4, #0]
 8000d14:	e7ed      	b.n	8000cf2 <_free_r+0x1e>
 8000d16:	461a      	mov	r2, r3
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	b10b      	cbz	r3, 8000d20 <_free_r+0x4c>
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d9fa      	bls.n	8000d16 <_free_r+0x42>
 8000d20:	6811      	ldr	r1, [r2, #0]
 8000d22:	1850      	adds	r0, r2, r1
 8000d24:	42a0      	cmp	r0, r4
 8000d26:	d10b      	bne.n	8000d40 <_free_r+0x6c>
 8000d28:	6820      	ldr	r0, [r4, #0]
 8000d2a:	4401      	add	r1, r0
 8000d2c:	1850      	adds	r0, r2, r1
 8000d2e:	4283      	cmp	r3, r0
 8000d30:	6011      	str	r1, [r2, #0]
 8000d32:	d1e0      	bne.n	8000cf6 <_free_r+0x22>
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	6053      	str	r3, [r2, #4]
 8000d3a:	4408      	add	r0, r1
 8000d3c:	6010      	str	r0, [r2, #0]
 8000d3e:	e7da      	b.n	8000cf6 <_free_r+0x22>
 8000d40:	d902      	bls.n	8000d48 <_free_r+0x74>
 8000d42:	230c      	movs	r3, #12
 8000d44:	602b      	str	r3, [r5, #0]
 8000d46:	e7d6      	b.n	8000cf6 <_free_r+0x22>
 8000d48:	6820      	ldr	r0, [r4, #0]
 8000d4a:	1821      	adds	r1, r4, r0
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	bf04      	itt	eq
 8000d50:	6819      	ldreq	r1, [r3, #0]
 8000d52:	685b      	ldreq	r3, [r3, #4]
 8000d54:	6063      	str	r3, [r4, #4]
 8000d56:	bf04      	itt	eq
 8000d58:	1809      	addeq	r1, r1, r0
 8000d5a:	6021      	streq	r1, [r4, #0]
 8000d5c:	6054      	str	r4, [r2, #4]
 8000d5e:	e7ca      	b.n	8000cf6 <_free_r+0x22>
 8000d60:	bd38      	pop	{r3, r4, r5, pc}
 8000d62:	bf00      	nop
 8000d64:	20000208 	.word	0x20000208

08000d68 <malloc>:
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <malloc+0xc>)
 8000d6a:	4601      	mov	r1, r0
 8000d6c:	6818      	ldr	r0, [r3, #0]
 8000d6e:	f000 b823 	b.w	8000db8 <_malloc_r>
 8000d72:	bf00      	nop
 8000d74:	2000009c 	.word	0x2000009c

08000d78 <sbrk_aligned>:
 8000d78:	b570      	push	{r4, r5, r6, lr}
 8000d7a:	4e0e      	ldr	r6, [pc, #56]	; (8000db4 <sbrk_aligned+0x3c>)
 8000d7c:	460c      	mov	r4, r1
 8000d7e:	6831      	ldr	r1, [r6, #0]
 8000d80:	4605      	mov	r5, r0
 8000d82:	b911      	cbnz	r1, 8000d8a <sbrk_aligned+0x12>
 8000d84:	f000 fcea 	bl	800175c <_sbrk_r>
 8000d88:	6030      	str	r0, [r6, #0]
 8000d8a:	4621      	mov	r1, r4
 8000d8c:	4628      	mov	r0, r5
 8000d8e:	f000 fce5 	bl	800175c <_sbrk_r>
 8000d92:	1c43      	adds	r3, r0, #1
 8000d94:	d00a      	beq.n	8000dac <sbrk_aligned+0x34>
 8000d96:	1cc4      	adds	r4, r0, #3
 8000d98:	f024 0403 	bic.w	r4, r4, #3
 8000d9c:	42a0      	cmp	r0, r4
 8000d9e:	d007      	beq.n	8000db0 <sbrk_aligned+0x38>
 8000da0:	1a21      	subs	r1, r4, r0
 8000da2:	4628      	mov	r0, r5
 8000da4:	f000 fcda 	bl	800175c <_sbrk_r>
 8000da8:	3001      	adds	r0, #1
 8000daa:	d101      	bne.n	8000db0 <sbrk_aligned+0x38>
 8000dac:	f04f 34ff 	mov.w	r4, #4294967295
 8000db0:	4620      	mov	r0, r4
 8000db2:	bd70      	pop	{r4, r5, r6, pc}
 8000db4:	2000020c 	.word	0x2000020c

08000db8 <_malloc_r>:
 8000db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000dbc:	1ccd      	adds	r5, r1, #3
 8000dbe:	f025 0503 	bic.w	r5, r5, #3
 8000dc2:	3508      	adds	r5, #8
 8000dc4:	2d0c      	cmp	r5, #12
 8000dc6:	bf38      	it	cc
 8000dc8:	250c      	movcc	r5, #12
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	4607      	mov	r7, r0
 8000dce:	db01      	blt.n	8000dd4 <_malloc_r+0x1c>
 8000dd0:	42a9      	cmp	r1, r5
 8000dd2:	d905      	bls.n	8000de0 <_malloc_r+0x28>
 8000dd4:	230c      	movs	r3, #12
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	2600      	movs	r6, #0
 8000dda:	4630      	mov	r0, r6
 8000ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000de0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000eb4 <_malloc_r+0xfc>
 8000de4:	f000 f868 	bl	8000eb8 <__malloc_lock>
 8000de8:	f8d8 3000 	ldr.w	r3, [r8]
 8000dec:	461c      	mov	r4, r3
 8000dee:	bb5c      	cbnz	r4, 8000e48 <_malloc_r+0x90>
 8000df0:	4629      	mov	r1, r5
 8000df2:	4638      	mov	r0, r7
 8000df4:	f7ff ffc0 	bl	8000d78 <sbrk_aligned>
 8000df8:	1c43      	adds	r3, r0, #1
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	d155      	bne.n	8000eaa <_malloc_r+0xf2>
 8000dfe:	f8d8 4000 	ldr.w	r4, [r8]
 8000e02:	4626      	mov	r6, r4
 8000e04:	2e00      	cmp	r6, #0
 8000e06:	d145      	bne.n	8000e94 <_malloc_r+0xdc>
 8000e08:	2c00      	cmp	r4, #0
 8000e0a:	d048      	beq.n	8000e9e <_malloc_r+0xe6>
 8000e0c:	6823      	ldr	r3, [r4, #0]
 8000e0e:	4631      	mov	r1, r6
 8000e10:	4638      	mov	r0, r7
 8000e12:	eb04 0903 	add.w	r9, r4, r3
 8000e16:	f000 fca1 	bl	800175c <_sbrk_r>
 8000e1a:	4581      	cmp	r9, r0
 8000e1c:	d13f      	bne.n	8000e9e <_malloc_r+0xe6>
 8000e1e:	6821      	ldr	r1, [r4, #0]
 8000e20:	1a6d      	subs	r5, r5, r1
 8000e22:	4629      	mov	r1, r5
 8000e24:	4638      	mov	r0, r7
 8000e26:	f7ff ffa7 	bl	8000d78 <sbrk_aligned>
 8000e2a:	3001      	adds	r0, #1
 8000e2c:	d037      	beq.n	8000e9e <_malloc_r+0xe6>
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	442b      	add	r3, r5
 8000e32:	6023      	str	r3, [r4, #0]
 8000e34:	f8d8 3000 	ldr.w	r3, [r8]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d038      	beq.n	8000eae <_malloc_r+0xf6>
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	42a2      	cmp	r2, r4
 8000e40:	d12b      	bne.n	8000e9a <_malloc_r+0xe2>
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	e00f      	b.n	8000e68 <_malloc_r+0xb0>
 8000e48:	6822      	ldr	r2, [r4, #0]
 8000e4a:	1b52      	subs	r2, r2, r5
 8000e4c:	d41f      	bmi.n	8000e8e <_malloc_r+0xd6>
 8000e4e:	2a0b      	cmp	r2, #11
 8000e50:	d917      	bls.n	8000e82 <_malloc_r+0xca>
 8000e52:	1961      	adds	r1, r4, r5
 8000e54:	42a3      	cmp	r3, r4
 8000e56:	6025      	str	r5, [r4, #0]
 8000e58:	bf18      	it	ne
 8000e5a:	6059      	strne	r1, [r3, #4]
 8000e5c:	6863      	ldr	r3, [r4, #4]
 8000e5e:	bf08      	it	eq
 8000e60:	f8c8 1000 	streq.w	r1, [r8]
 8000e64:	5162      	str	r2, [r4, r5]
 8000e66:	604b      	str	r3, [r1, #4]
 8000e68:	4638      	mov	r0, r7
 8000e6a:	f104 060b 	add.w	r6, r4, #11
 8000e6e:	f000 f829 	bl	8000ec4 <__malloc_unlock>
 8000e72:	f026 0607 	bic.w	r6, r6, #7
 8000e76:	1d23      	adds	r3, r4, #4
 8000e78:	1af2      	subs	r2, r6, r3
 8000e7a:	d0ae      	beq.n	8000dda <_malloc_r+0x22>
 8000e7c:	1b9b      	subs	r3, r3, r6
 8000e7e:	50a3      	str	r3, [r4, r2]
 8000e80:	e7ab      	b.n	8000dda <_malloc_r+0x22>
 8000e82:	42a3      	cmp	r3, r4
 8000e84:	6862      	ldr	r2, [r4, #4]
 8000e86:	d1dd      	bne.n	8000e44 <_malloc_r+0x8c>
 8000e88:	f8c8 2000 	str.w	r2, [r8]
 8000e8c:	e7ec      	b.n	8000e68 <_malloc_r+0xb0>
 8000e8e:	4623      	mov	r3, r4
 8000e90:	6864      	ldr	r4, [r4, #4]
 8000e92:	e7ac      	b.n	8000dee <_malloc_r+0x36>
 8000e94:	4634      	mov	r4, r6
 8000e96:	6876      	ldr	r6, [r6, #4]
 8000e98:	e7b4      	b.n	8000e04 <_malloc_r+0x4c>
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7cc      	b.n	8000e38 <_malloc_r+0x80>
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4638      	mov	r0, r7
 8000ea4:	f000 f80e 	bl	8000ec4 <__malloc_unlock>
 8000ea8:	e797      	b.n	8000dda <_malloc_r+0x22>
 8000eaa:	6025      	str	r5, [r4, #0]
 8000eac:	e7dc      	b.n	8000e68 <_malloc_r+0xb0>
 8000eae:	605b      	str	r3, [r3, #4]
 8000eb0:	deff      	udf	#255	; 0xff
 8000eb2:	bf00      	nop
 8000eb4:	20000208 	.word	0x20000208

08000eb8 <__malloc_lock>:
 8000eb8:	4801      	ldr	r0, [pc, #4]	; (8000ec0 <__malloc_lock+0x8>)
 8000eba:	f7ff beeb 	b.w	8000c94 <__retarget_lock_acquire_recursive>
 8000ebe:	bf00      	nop
 8000ec0:	20000204 	.word	0x20000204

08000ec4 <__malloc_unlock>:
 8000ec4:	4801      	ldr	r0, [pc, #4]	; (8000ecc <__malloc_unlock+0x8>)
 8000ec6:	f7ff bee6 	b.w	8000c96 <__retarget_lock_release_recursive>
 8000eca:	bf00      	nop
 8000ecc:	20000204 	.word	0x20000204

08000ed0 <__sfputc_r>:
 8000ed0:	6893      	ldr	r3, [r2, #8]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	b410      	push	{r4}
 8000ed8:	6093      	str	r3, [r2, #8]
 8000eda:	da07      	bge.n	8000eec <__sfputc_r+0x1c>
 8000edc:	6994      	ldr	r4, [r2, #24]
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	db01      	blt.n	8000ee6 <__sfputc_r+0x16>
 8000ee2:	290a      	cmp	r1, #10
 8000ee4:	d102      	bne.n	8000eec <__sfputc_r+0x1c>
 8000ee6:	bc10      	pop	{r4}
 8000ee8:	f7ff bdc7 	b.w	8000a7a <__swbuf_r>
 8000eec:	6813      	ldr	r3, [r2, #0]
 8000eee:	1c58      	adds	r0, r3, #1
 8000ef0:	6010      	str	r0, [r2, #0]
 8000ef2:	7019      	strb	r1, [r3, #0]
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	bc10      	pop	{r4}
 8000ef8:	4770      	bx	lr

08000efa <__sfputs_r>:
 8000efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efc:	4606      	mov	r6, r0
 8000efe:	460f      	mov	r7, r1
 8000f00:	4614      	mov	r4, r2
 8000f02:	18d5      	adds	r5, r2, r3
 8000f04:	42ac      	cmp	r4, r5
 8000f06:	d101      	bne.n	8000f0c <__sfputs_r+0x12>
 8000f08:	2000      	movs	r0, #0
 8000f0a:	e007      	b.n	8000f1c <__sfputs_r+0x22>
 8000f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f10:	463a      	mov	r2, r7
 8000f12:	4630      	mov	r0, r6
 8000f14:	f7ff ffdc 	bl	8000ed0 <__sfputc_r>
 8000f18:	1c43      	adds	r3, r0, #1
 8000f1a:	d1f3      	bne.n	8000f04 <__sfputs_r+0xa>
 8000f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000f20 <_vfiprintf_r>:
 8000f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f24:	460d      	mov	r5, r1
 8000f26:	b09d      	sub	sp, #116	; 0x74
 8000f28:	4614      	mov	r4, r2
 8000f2a:	4698      	mov	r8, r3
 8000f2c:	4606      	mov	r6, r0
 8000f2e:	b118      	cbz	r0, 8000f38 <_vfiprintf_r+0x18>
 8000f30:	6a03      	ldr	r3, [r0, #32]
 8000f32:	b90b      	cbnz	r3, 8000f38 <_vfiprintf_r+0x18>
 8000f34:	f7ff fcb2 	bl	800089c <__sinit>
 8000f38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f3a:	07d9      	lsls	r1, r3, #31
 8000f3c:	d405      	bmi.n	8000f4a <_vfiprintf_r+0x2a>
 8000f3e:	89ab      	ldrh	r3, [r5, #12]
 8000f40:	059a      	lsls	r2, r3, #22
 8000f42:	d402      	bmi.n	8000f4a <_vfiprintf_r+0x2a>
 8000f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f46:	f7ff fea5 	bl	8000c94 <__retarget_lock_acquire_recursive>
 8000f4a:	89ab      	ldrh	r3, [r5, #12]
 8000f4c:	071b      	lsls	r3, r3, #28
 8000f4e:	d501      	bpl.n	8000f54 <_vfiprintf_r+0x34>
 8000f50:	692b      	ldr	r3, [r5, #16]
 8000f52:	b99b      	cbnz	r3, 8000f7c <_vfiprintf_r+0x5c>
 8000f54:	4629      	mov	r1, r5
 8000f56:	4630      	mov	r0, r6
 8000f58:	f7ff fdcc 	bl	8000af4 <__swsetup_r>
 8000f5c:	b170      	cbz	r0, 8000f7c <_vfiprintf_r+0x5c>
 8000f5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f60:	07dc      	lsls	r4, r3, #31
 8000f62:	d504      	bpl.n	8000f6e <_vfiprintf_r+0x4e>
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	b01d      	add	sp, #116	; 0x74
 8000f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f6e:	89ab      	ldrh	r3, [r5, #12]
 8000f70:	0598      	lsls	r0, r3, #22
 8000f72:	d4f7      	bmi.n	8000f64 <_vfiprintf_r+0x44>
 8000f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f76:	f7ff fe8e 	bl	8000c96 <__retarget_lock_release_recursive>
 8000f7a:	e7f3      	b.n	8000f64 <_vfiprintf_r+0x44>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8000f80:	2320      	movs	r3, #32
 8000f82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000f86:	f8cd 800c 	str.w	r8, [sp, #12]
 8000f8a:	2330      	movs	r3, #48	; 0x30
 8000f8c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001140 <_vfiprintf_r+0x220>
 8000f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000f94:	f04f 0901 	mov.w	r9, #1
 8000f98:	4623      	mov	r3, r4
 8000f9a:	469a      	mov	sl, r3
 8000f9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fa0:	b10a      	cbz	r2, 8000fa6 <_vfiprintf_r+0x86>
 8000fa2:	2a25      	cmp	r2, #37	; 0x25
 8000fa4:	d1f9      	bne.n	8000f9a <_vfiprintf_r+0x7a>
 8000fa6:	ebba 0b04 	subs.w	fp, sl, r4
 8000faa:	d00b      	beq.n	8000fc4 <_vfiprintf_r+0xa4>
 8000fac:	465b      	mov	r3, fp
 8000fae:	4622      	mov	r2, r4
 8000fb0:	4629      	mov	r1, r5
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	f7ff ffa1 	bl	8000efa <__sfputs_r>
 8000fb8:	3001      	adds	r0, #1
 8000fba:	f000 80a9 	beq.w	8001110 <_vfiprintf_r+0x1f0>
 8000fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000fc0:	445a      	add	r2, fp
 8000fc2:	9209      	str	r2, [sp, #36]	; 0x24
 8000fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80a1 	beq.w	8001110 <_vfiprintf_r+0x1f0>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000fd8:	f10a 0a01 	add.w	sl, sl, #1
 8000fdc:	9304      	str	r3, [sp, #16]
 8000fde:	9307      	str	r3, [sp, #28]
 8000fe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000fe4:	931a      	str	r3, [sp, #104]	; 0x68
 8000fe6:	4654      	mov	r4, sl
 8000fe8:	2205      	movs	r2, #5
 8000fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fee:	4854      	ldr	r0, [pc, #336]	; (8001140 <_vfiprintf_r+0x220>)
 8000ff0:	f7ff f90e 	bl	8000210 <memchr>
 8000ff4:	9a04      	ldr	r2, [sp, #16]
 8000ff6:	b9d8      	cbnz	r0, 8001030 <_vfiprintf_r+0x110>
 8000ff8:	06d1      	lsls	r1, r2, #27
 8000ffa:	bf44      	itt	mi
 8000ffc:	2320      	movmi	r3, #32
 8000ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001002:	0713      	lsls	r3, r2, #28
 8001004:	bf44      	itt	mi
 8001006:	232b      	movmi	r3, #43	; 0x2b
 8001008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800100c:	f89a 3000 	ldrb.w	r3, [sl]
 8001010:	2b2a      	cmp	r3, #42	; 0x2a
 8001012:	d015      	beq.n	8001040 <_vfiprintf_r+0x120>
 8001014:	9a07      	ldr	r2, [sp, #28]
 8001016:	4654      	mov	r4, sl
 8001018:	2000      	movs	r0, #0
 800101a:	f04f 0c0a 	mov.w	ip, #10
 800101e:	4621      	mov	r1, r4
 8001020:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001024:	3b30      	subs	r3, #48	; 0x30
 8001026:	2b09      	cmp	r3, #9
 8001028:	d94d      	bls.n	80010c6 <_vfiprintf_r+0x1a6>
 800102a:	b1b0      	cbz	r0, 800105a <_vfiprintf_r+0x13a>
 800102c:	9207      	str	r2, [sp, #28]
 800102e:	e014      	b.n	800105a <_vfiprintf_r+0x13a>
 8001030:	eba0 0308 	sub.w	r3, r0, r8
 8001034:	fa09 f303 	lsl.w	r3, r9, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	9304      	str	r3, [sp, #16]
 800103c:	46a2      	mov	sl, r4
 800103e:	e7d2      	b.n	8000fe6 <_vfiprintf_r+0xc6>
 8001040:	9b03      	ldr	r3, [sp, #12]
 8001042:	1d19      	adds	r1, r3, #4
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	9103      	str	r1, [sp, #12]
 8001048:	2b00      	cmp	r3, #0
 800104a:	bfbb      	ittet	lt
 800104c:	425b      	neglt	r3, r3
 800104e:	f042 0202 	orrlt.w	r2, r2, #2
 8001052:	9307      	strge	r3, [sp, #28]
 8001054:	9307      	strlt	r3, [sp, #28]
 8001056:	bfb8      	it	lt
 8001058:	9204      	strlt	r2, [sp, #16]
 800105a:	7823      	ldrb	r3, [r4, #0]
 800105c:	2b2e      	cmp	r3, #46	; 0x2e
 800105e:	d10c      	bne.n	800107a <_vfiprintf_r+0x15a>
 8001060:	7863      	ldrb	r3, [r4, #1]
 8001062:	2b2a      	cmp	r3, #42	; 0x2a
 8001064:	d134      	bne.n	80010d0 <_vfiprintf_r+0x1b0>
 8001066:	9b03      	ldr	r3, [sp, #12]
 8001068:	1d1a      	adds	r2, r3, #4
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	9203      	str	r2, [sp, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	bfb8      	it	lt
 8001072:	f04f 33ff 	movlt.w	r3, #4294967295
 8001076:	3402      	adds	r4, #2
 8001078:	9305      	str	r3, [sp, #20]
 800107a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001144 <_vfiprintf_r+0x224>
 800107e:	7821      	ldrb	r1, [r4, #0]
 8001080:	2203      	movs	r2, #3
 8001082:	4650      	mov	r0, sl
 8001084:	f7ff f8c4 	bl	8000210 <memchr>
 8001088:	b138      	cbz	r0, 800109a <_vfiprintf_r+0x17a>
 800108a:	9b04      	ldr	r3, [sp, #16]
 800108c:	eba0 000a 	sub.w	r0, r0, sl
 8001090:	2240      	movs	r2, #64	; 0x40
 8001092:	4082      	lsls	r2, r0
 8001094:	4313      	orrs	r3, r2
 8001096:	3401      	adds	r4, #1
 8001098:	9304      	str	r3, [sp, #16]
 800109a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800109e:	482a      	ldr	r0, [pc, #168]	; (8001148 <_vfiprintf_r+0x228>)
 80010a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80010a4:	2206      	movs	r2, #6
 80010a6:	f7ff f8b3 	bl	8000210 <memchr>
 80010aa:	2800      	cmp	r0, #0
 80010ac:	d03f      	beq.n	800112e <_vfiprintf_r+0x20e>
 80010ae:	4b27      	ldr	r3, [pc, #156]	; (800114c <_vfiprintf_r+0x22c>)
 80010b0:	bb1b      	cbnz	r3, 80010fa <_vfiprintf_r+0x1da>
 80010b2:	9b03      	ldr	r3, [sp, #12]
 80010b4:	3307      	adds	r3, #7
 80010b6:	f023 0307 	bic.w	r3, r3, #7
 80010ba:	3308      	adds	r3, #8
 80010bc:	9303      	str	r3, [sp, #12]
 80010be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010c0:	443b      	add	r3, r7
 80010c2:	9309      	str	r3, [sp, #36]	; 0x24
 80010c4:	e768      	b.n	8000f98 <_vfiprintf_r+0x78>
 80010c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80010ca:	460c      	mov	r4, r1
 80010cc:	2001      	movs	r0, #1
 80010ce:	e7a6      	b.n	800101e <_vfiprintf_r+0xfe>
 80010d0:	2300      	movs	r3, #0
 80010d2:	3401      	adds	r4, #1
 80010d4:	9305      	str	r3, [sp, #20]
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 0c0a 	mov.w	ip, #10
 80010dc:	4620      	mov	r0, r4
 80010de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80010e2:	3a30      	subs	r2, #48	; 0x30
 80010e4:	2a09      	cmp	r2, #9
 80010e6:	d903      	bls.n	80010f0 <_vfiprintf_r+0x1d0>
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0c6      	beq.n	800107a <_vfiprintf_r+0x15a>
 80010ec:	9105      	str	r1, [sp, #20]
 80010ee:	e7c4      	b.n	800107a <_vfiprintf_r+0x15a>
 80010f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80010f4:	4604      	mov	r4, r0
 80010f6:	2301      	movs	r3, #1
 80010f8:	e7f0      	b.n	80010dc <_vfiprintf_r+0x1bc>
 80010fa:	ab03      	add	r3, sp, #12
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	462a      	mov	r2, r5
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <_vfiprintf_r+0x230>)
 8001102:	a904      	add	r1, sp, #16
 8001104:	4630      	mov	r0, r6
 8001106:	f3af 8000 	nop.w
 800110a:	4607      	mov	r7, r0
 800110c:	1c78      	adds	r0, r7, #1
 800110e:	d1d6      	bne.n	80010be <_vfiprintf_r+0x19e>
 8001110:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001112:	07d9      	lsls	r1, r3, #31
 8001114:	d405      	bmi.n	8001122 <_vfiprintf_r+0x202>
 8001116:	89ab      	ldrh	r3, [r5, #12]
 8001118:	059a      	lsls	r2, r3, #22
 800111a:	d402      	bmi.n	8001122 <_vfiprintf_r+0x202>
 800111c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800111e:	f7ff fdba 	bl	8000c96 <__retarget_lock_release_recursive>
 8001122:	89ab      	ldrh	r3, [r5, #12]
 8001124:	065b      	lsls	r3, r3, #25
 8001126:	f53f af1d 	bmi.w	8000f64 <_vfiprintf_r+0x44>
 800112a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800112c:	e71c      	b.n	8000f68 <_vfiprintf_r+0x48>
 800112e:	ab03      	add	r3, sp, #12
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	462a      	mov	r2, r5
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <_vfiprintf_r+0x230>)
 8001136:	a904      	add	r1, sp, #16
 8001138:	4630      	mov	r0, r6
 800113a:	f000 f879 	bl	8001230 <_printf_i>
 800113e:	e7e4      	b.n	800110a <_vfiprintf_r+0x1ea>
 8001140:	08001942 	.word	0x08001942
 8001144:	08001948 	.word	0x08001948
 8001148:	0800194c 	.word	0x0800194c
 800114c:	00000000 	.word	0x00000000
 8001150:	08000efb 	.word	0x08000efb

08001154 <_printf_common>:
 8001154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001158:	4616      	mov	r6, r2
 800115a:	4699      	mov	r9, r3
 800115c:	688a      	ldr	r2, [r1, #8]
 800115e:	690b      	ldr	r3, [r1, #16]
 8001160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001164:	4293      	cmp	r3, r2
 8001166:	bfb8      	it	lt
 8001168:	4613      	movlt	r3, r2
 800116a:	6033      	str	r3, [r6, #0]
 800116c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001170:	4607      	mov	r7, r0
 8001172:	460c      	mov	r4, r1
 8001174:	b10a      	cbz	r2, 800117a <_printf_common+0x26>
 8001176:	3301      	adds	r3, #1
 8001178:	6033      	str	r3, [r6, #0]
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	0699      	lsls	r1, r3, #26
 800117e:	bf42      	ittt	mi
 8001180:	6833      	ldrmi	r3, [r6, #0]
 8001182:	3302      	addmi	r3, #2
 8001184:	6033      	strmi	r3, [r6, #0]
 8001186:	6825      	ldr	r5, [r4, #0]
 8001188:	f015 0506 	ands.w	r5, r5, #6
 800118c:	d106      	bne.n	800119c <_printf_common+0x48>
 800118e:	f104 0a19 	add.w	sl, r4, #25
 8001192:	68e3      	ldr	r3, [r4, #12]
 8001194:	6832      	ldr	r2, [r6, #0]
 8001196:	1a9b      	subs	r3, r3, r2
 8001198:	42ab      	cmp	r3, r5
 800119a:	dc26      	bgt.n	80011ea <_printf_common+0x96>
 800119c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80011a0:	1e13      	subs	r3, r2, #0
 80011a2:	6822      	ldr	r2, [r4, #0]
 80011a4:	bf18      	it	ne
 80011a6:	2301      	movne	r3, #1
 80011a8:	0692      	lsls	r2, r2, #26
 80011aa:	d42b      	bmi.n	8001204 <_printf_common+0xb0>
 80011ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80011b0:	4649      	mov	r1, r9
 80011b2:	4638      	mov	r0, r7
 80011b4:	47c0      	blx	r8
 80011b6:	3001      	adds	r0, #1
 80011b8:	d01e      	beq.n	80011f8 <_printf_common+0xa4>
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	6922      	ldr	r2, [r4, #16]
 80011be:	f003 0306 	and.w	r3, r3, #6
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf02      	ittt	eq
 80011c6:	68e5      	ldreq	r5, [r4, #12]
 80011c8:	6833      	ldreq	r3, [r6, #0]
 80011ca:	1aed      	subeq	r5, r5, r3
 80011cc:	68a3      	ldr	r3, [r4, #8]
 80011ce:	bf0c      	ite	eq
 80011d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80011d4:	2500      	movne	r5, #0
 80011d6:	4293      	cmp	r3, r2
 80011d8:	bfc4      	itt	gt
 80011da:	1a9b      	subgt	r3, r3, r2
 80011dc:	18ed      	addgt	r5, r5, r3
 80011de:	2600      	movs	r6, #0
 80011e0:	341a      	adds	r4, #26
 80011e2:	42b5      	cmp	r5, r6
 80011e4:	d11a      	bne.n	800121c <_printf_common+0xc8>
 80011e6:	2000      	movs	r0, #0
 80011e8:	e008      	b.n	80011fc <_printf_common+0xa8>
 80011ea:	2301      	movs	r3, #1
 80011ec:	4652      	mov	r2, sl
 80011ee:	4649      	mov	r1, r9
 80011f0:	4638      	mov	r0, r7
 80011f2:	47c0      	blx	r8
 80011f4:	3001      	adds	r0, #1
 80011f6:	d103      	bne.n	8001200 <_printf_common+0xac>
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001200:	3501      	adds	r5, #1
 8001202:	e7c6      	b.n	8001192 <_printf_common+0x3e>
 8001204:	18e1      	adds	r1, r4, r3
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	2030      	movs	r0, #48	; 0x30
 800120a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800120e:	4422      	add	r2, r4
 8001210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001218:	3302      	adds	r3, #2
 800121a:	e7c7      	b.n	80011ac <_printf_common+0x58>
 800121c:	2301      	movs	r3, #1
 800121e:	4622      	mov	r2, r4
 8001220:	4649      	mov	r1, r9
 8001222:	4638      	mov	r0, r7
 8001224:	47c0      	blx	r8
 8001226:	3001      	adds	r0, #1
 8001228:	d0e6      	beq.n	80011f8 <_printf_common+0xa4>
 800122a:	3601      	adds	r6, #1
 800122c:	e7d9      	b.n	80011e2 <_printf_common+0x8e>
	...

08001230 <_printf_i>:
 8001230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001234:	7e0f      	ldrb	r7, [r1, #24]
 8001236:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001238:	2f78      	cmp	r7, #120	; 0x78
 800123a:	4691      	mov	r9, r2
 800123c:	4680      	mov	r8, r0
 800123e:	460c      	mov	r4, r1
 8001240:	469a      	mov	sl, r3
 8001242:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001246:	d807      	bhi.n	8001258 <_printf_i+0x28>
 8001248:	2f62      	cmp	r7, #98	; 0x62
 800124a:	d80a      	bhi.n	8001262 <_printf_i+0x32>
 800124c:	2f00      	cmp	r7, #0
 800124e:	f000 80d4 	beq.w	80013fa <_printf_i+0x1ca>
 8001252:	2f58      	cmp	r7, #88	; 0x58
 8001254:	f000 80c0 	beq.w	80013d8 <_printf_i+0x1a8>
 8001258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800125c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001260:	e03a      	b.n	80012d8 <_printf_i+0xa8>
 8001262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001266:	2b15      	cmp	r3, #21
 8001268:	d8f6      	bhi.n	8001258 <_printf_i+0x28>
 800126a:	a101      	add	r1, pc, #4	; (adr r1, 8001270 <_printf_i+0x40>)
 800126c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001270:	080012c9 	.word	0x080012c9
 8001274:	080012dd 	.word	0x080012dd
 8001278:	08001259 	.word	0x08001259
 800127c:	08001259 	.word	0x08001259
 8001280:	08001259 	.word	0x08001259
 8001284:	08001259 	.word	0x08001259
 8001288:	080012dd 	.word	0x080012dd
 800128c:	08001259 	.word	0x08001259
 8001290:	08001259 	.word	0x08001259
 8001294:	08001259 	.word	0x08001259
 8001298:	08001259 	.word	0x08001259
 800129c:	080013e1 	.word	0x080013e1
 80012a0:	08001309 	.word	0x08001309
 80012a4:	0800139b 	.word	0x0800139b
 80012a8:	08001259 	.word	0x08001259
 80012ac:	08001259 	.word	0x08001259
 80012b0:	08001403 	.word	0x08001403
 80012b4:	08001259 	.word	0x08001259
 80012b8:	08001309 	.word	0x08001309
 80012bc:	08001259 	.word	0x08001259
 80012c0:	08001259 	.word	0x08001259
 80012c4:	080013a3 	.word	0x080013a3
 80012c8:	682b      	ldr	r3, [r5, #0]
 80012ca:	1d1a      	adds	r2, r3, #4
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	602a      	str	r2, [r5, #0]
 80012d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80012d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80012d8:	2301      	movs	r3, #1
 80012da:	e09f      	b.n	800141c <_printf_i+0x1ec>
 80012dc:	6820      	ldr	r0, [r4, #0]
 80012de:	682b      	ldr	r3, [r5, #0]
 80012e0:	0607      	lsls	r7, r0, #24
 80012e2:	f103 0104 	add.w	r1, r3, #4
 80012e6:	6029      	str	r1, [r5, #0]
 80012e8:	d501      	bpl.n	80012ee <_printf_i+0xbe>
 80012ea:	681e      	ldr	r6, [r3, #0]
 80012ec:	e003      	b.n	80012f6 <_printf_i+0xc6>
 80012ee:	0646      	lsls	r6, r0, #25
 80012f0:	d5fb      	bpl.n	80012ea <_printf_i+0xba>
 80012f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80012f6:	2e00      	cmp	r6, #0
 80012f8:	da03      	bge.n	8001302 <_printf_i+0xd2>
 80012fa:	232d      	movs	r3, #45	; 0x2d
 80012fc:	4276      	negs	r6, r6
 80012fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001302:	485a      	ldr	r0, [pc, #360]	; (800146c <_printf_i+0x23c>)
 8001304:	230a      	movs	r3, #10
 8001306:	e012      	b.n	800132e <_printf_i+0xfe>
 8001308:	682b      	ldr	r3, [r5, #0]
 800130a:	6820      	ldr	r0, [r4, #0]
 800130c:	1d19      	adds	r1, r3, #4
 800130e:	6029      	str	r1, [r5, #0]
 8001310:	0605      	lsls	r5, r0, #24
 8001312:	d501      	bpl.n	8001318 <_printf_i+0xe8>
 8001314:	681e      	ldr	r6, [r3, #0]
 8001316:	e002      	b.n	800131e <_printf_i+0xee>
 8001318:	0641      	lsls	r1, r0, #25
 800131a:	d5fb      	bpl.n	8001314 <_printf_i+0xe4>
 800131c:	881e      	ldrh	r6, [r3, #0]
 800131e:	4853      	ldr	r0, [pc, #332]	; (800146c <_printf_i+0x23c>)
 8001320:	2f6f      	cmp	r7, #111	; 0x6f
 8001322:	bf0c      	ite	eq
 8001324:	2308      	moveq	r3, #8
 8001326:	230a      	movne	r3, #10
 8001328:	2100      	movs	r1, #0
 800132a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800132e:	6865      	ldr	r5, [r4, #4]
 8001330:	60a5      	str	r5, [r4, #8]
 8001332:	2d00      	cmp	r5, #0
 8001334:	bfa2      	ittt	ge
 8001336:	6821      	ldrge	r1, [r4, #0]
 8001338:	f021 0104 	bicge.w	r1, r1, #4
 800133c:	6021      	strge	r1, [r4, #0]
 800133e:	b90e      	cbnz	r6, 8001344 <_printf_i+0x114>
 8001340:	2d00      	cmp	r5, #0
 8001342:	d04b      	beq.n	80013dc <_printf_i+0x1ac>
 8001344:	4615      	mov	r5, r2
 8001346:	fbb6 f1f3 	udiv	r1, r6, r3
 800134a:	fb03 6711 	mls	r7, r3, r1, r6
 800134e:	5dc7      	ldrb	r7, [r0, r7]
 8001350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001354:	4637      	mov	r7, r6
 8001356:	42bb      	cmp	r3, r7
 8001358:	460e      	mov	r6, r1
 800135a:	d9f4      	bls.n	8001346 <_printf_i+0x116>
 800135c:	2b08      	cmp	r3, #8
 800135e:	d10b      	bne.n	8001378 <_printf_i+0x148>
 8001360:	6823      	ldr	r3, [r4, #0]
 8001362:	07de      	lsls	r6, r3, #31
 8001364:	d508      	bpl.n	8001378 <_printf_i+0x148>
 8001366:	6923      	ldr	r3, [r4, #16]
 8001368:	6861      	ldr	r1, [r4, #4]
 800136a:	4299      	cmp	r1, r3
 800136c:	bfde      	ittt	le
 800136e:	2330      	movle	r3, #48	; 0x30
 8001370:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001374:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001378:	1b52      	subs	r2, r2, r5
 800137a:	6122      	str	r2, [r4, #16]
 800137c:	f8cd a000 	str.w	sl, [sp]
 8001380:	464b      	mov	r3, r9
 8001382:	aa03      	add	r2, sp, #12
 8001384:	4621      	mov	r1, r4
 8001386:	4640      	mov	r0, r8
 8001388:	f7ff fee4 	bl	8001154 <_printf_common>
 800138c:	3001      	adds	r0, #1
 800138e:	d14a      	bne.n	8001426 <_printf_i+0x1f6>
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	b004      	add	sp, #16
 8001396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	f043 0320 	orr.w	r3, r3, #32
 80013a0:	6023      	str	r3, [r4, #0]
 80013a2:	4833      	ldr	r0, [pc, #204]	; (8001470 <_printf_i+0x240>)
 80013a4:	2778      	movs	r7, #120	; 0x78
 80013a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80013aa:	6823      	ldr	r3, [r4, #0]
 80013ac:	6829      	ldr	r1, [r5, #0]
 80013ae:	061f      	lsls	r7, r3, #24
 80013b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80013b4:	d402      	bmi.n	80013bc <_printf_i+0x18c>
 80013b6:	065f      	lsls	r7, r3, #25
 80013b8:	bf48      	it	mi
 80013ba:	b2b6      	uxthmi	r6, r6
 80013bc:	07df      	lsls	r7, r3, #31
 80013be:	bf48      	it	mi
 80013c0:	f043 0320 	orrmi.w	r3, r3, #32
 80013c4:	6029      	str	r1, [r5, #0]
 80013c6:	bf48      	it	mi
 80013c8:	6023      	strmi	r3, [r4, #0]
 80013ca:	b91e      	cbnz	r6, 80013d4 <_printf_i+0x1a4>
 80013cc:	6823      	ldr	r3, [r4, #0]
 80013ce:	f023 0320 	bic.w	r3, r3, #32
 80013d2:	6023      	str	r3, [r4, #0]
 80013d4:	2310      	movs	r3, #16
 80013d6:	e7a7      	b.n	8001328 <_printf_i+0xf8>
 80013d8:	4824      	ldr	r0, [pc, #144]	; (800146c <_printf_i+0x23c>)
 80013da:	e7e4      	b.n	80013a6 <_printf_i+0x176>
 80013dc:	4615      	mov	r5, r2
 80013de:	e7bd      	b.n	800135c <_printf_i+0x12c>
 80013e0:	682b      	ldr	r3, [r5, #0]
 80013e2:	6826      	ldr	r6, [r4, #0]
 80013e4:	6961      	ldr	r1, [r4, #20]
 80013e6:	1d18      	adds	r0, r3, #4
 80013e8:	6028      	str	r0, [r5, #0]
 80013ea:	0635      	lsls	r5, r6, #24
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	d501      	bpl.n	80013f4 <_printf_i+0x1c4>
 80013f0:	6019      	str	r1, [r3, #0]
 80013f2:	e002      	b.n	80013fa <_printf_i+0x1ca>
 80013f4:	0670      	lsls	r0, r6, #25
 80013f6:	d5fb      	bpl.n	80013f0 <_printf_i+0x1c0>
 80013f8:	8019      	strh	r1, [r3, #0]
 80013fa:	2300      	movs	r3, #0
 80013fc:	6123      	str	r3, [r4, #16]
 80013fe:	4615      	mov	r5, r2
 8001400:	e7bc      	b.n	800137c <_printf_i+0x14c>
 8001402:	682b      	ldr	r3, [r5, #0]
 8001404:	1d1a      	adds	r2, r3, #4
 8001406:	602a      	str	r2, [r5, #0]
 8001408:	681d      	ldr	r5, [r3, #0]
 800140a:	6862      	ldr	r2, [r4, #4]
 800140c:	2100      	movs	r1, #0
 800140e:	4628      	mov	r0, r5
 8001410:	f7fe fefe 	bl	8000210 <memchr>
 8001414:	b108      	cbz	r0, 800141a <_printf_i+0x1ea>
 8001416:	1b40      	subs	r0, r0, r5
 8001418:	6060      	str	r0, [r4, #4]
 800141a:	6863      	ldr	r3, [r4, #4]
 800141c:	6123      	str	r3, [r4, #16]
 800141e:	2300      	movs	r3, #0
 8001420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001424:	e7aa      	b.n	800137c <_printf_i+0x14c>
 8001426:	6923      	ldr	r3, [r4, #16]
 8001428:	462a      	mov	r2, r5
 800142a:	4649      	mov	r1, r9
 800142c:	4640      	mov	r0, r8
 800142e:	47d0      	blx	sl
 8001430:	3001      	adds	r0, #1
 8001432:	d0ad      	beq.n	8001390 <_printf_i+0x160>
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	079b      	lsls	r3, r3, #30
 8001438:	d413      	bmi.n	8001462 <_printf_i+0x232>
 800143a:	68e0      	ldr	r0, [r4, #12]
 800143c:	9b03      	ldr	r3, [sp, #12]
 800143e:	4298      	cmp	r0, r3
 8001440:	bfb8      	it	lt
 8001442:	4618      	movlt	r0, r3
 8001444:	e7a6      	b.n	8001394 <_printf_i+0x164>
 8001446:	2301      	movs	r3, #1
 8001448:	4632      	mov	r2, r6
 800144a:	4649      	mov	r1, r9
 800144c:	4640      	mov	r0, r8
 800144e:	47d0      	blx	sl
 8001450:	3001      	adds	r0, #1
 8001452:	d09d      	beq.n	8001390 <_printf_i+0x160>
 8001454:	3501      	adds	r5, #1
 8001456:	68e3      	ldr	r3, [r4, #12]
 8001458:	9903      	ldr	r1, [sp, #12]
 800145a:	1a5b      	subs	r3, r3, r1
 800145c:	42ab      	cmp	r3, r5
 800145e:	dcf2      	bgt.n	8001446 <_printf_i+0x216>
 8001460:	e7eb      	b.n	800143a <_printf_i+0x20a>
 8001462:	2500      	movs	r5, #0
 8001464:	f104 0619 	add.w	r6, r4, #25
 8001468:	e7f5      	b.n	8001456 <_printf_i+0x226>
 800146a:	bf00      	nop
 800146c:	08001953 	.word	0x08001953
 8001470:	08001964 	.word	0x08001964

08001474 <__sflush_r>:
 8001474:	898a      	ldrh	r2, [r1, #12]
 8001476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001478:	4605      	mov	r5, r0
 800147a:	0710      	lsls	r0, r2, #28
 800147c:	460c      	mov	r4, r1
 800147e:	d457      	bmi.n	8001530 <__sflush_r+0xbc>
 8001480:	684b      	ldr	r3, [r1, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	dc04      	bgt.n	8001490 <__sflush_r+0x1c>
 8001486:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001488:	2b00      	cmp	r3, #0
 800148a:	dc01      	bgt.n	8001490 <__sflush_r+0x1c>
 800148c:	2000      	movs	r0, #0
 800148e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001490:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001492:	2e00      	cmp	r6, #0
 8001494:	d0fa      	beq.n	800148c <__sflush_r+0x18>
 8001496:	2300      	movs	r3, #0
 8001498:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800149c:	682f      	ldr	r7, [r5, #0]
 800149e:	6a21      	ldr	r1, [r4, #32]
 80014a0:	602b      	str	r3, [r5, #0]
 80014a2:	d032      	beq.n	800150a <__sflush_r+0x96>
 80014a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80014a6:	89a3      	ldrh	r3, [r4, #12]
 80014a8:	075a      	lsls	r2, r3, #29
 80014aa:	d505      	bpl.n	80014b8 <__sflush_r+0x44>
 80014ac:	6863      	ldr	r3, [r4, #4]
 80014ae:	1ac0      	subs	r0, r0, r3
 80014b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014b2:	b10b      	cbz	r3, 80014b8 <__sflush_r+0x44>
 80014b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014b6:	1ac0      	subs	r0, r0, r3
 80014b8:	2300      	movs	r3, #0
 80014ba:	4602      	mov	r2, r0
 80014bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014be:	6a21      	ldr	r1, [r4, #32]
 80014c0:	4628      	mov	r0, r5
 80014c2:	47b0      	blx	r6
 80014c4:	1c43      	adds	r3, r0, #1
 80014c6:	89a3      	ldrh	r3, [r4, #12]
 80014c8:	d106      	bne.n	80014d8 <__sflush_r+0x64>
 80014ca:	6829      	ldr	r1, [r5, #0]
 80014cc:	291d      	cmp	r1, #29
 80014ce:	d82b      	bhi.n	8001528 <__sflush_r+0xb4>
 80014d0:	4a28      	ldr	r2, [pc, #160]	; (8001574 <__sflush_r+0x100>)
 80014d2:	410a      	asrs	r2, r1
 80014d4:	07d6      	lsls	r6, r2, #31
 80014d6:	d427      	bmi.n	8001528 <__sflush_r+0xb4>
 80014d8:	2200      	movs	r2, #0
 80014da:	6062      	str	r2, [r4, #4]
 80014dc:	04d9      	lsls	r1, r3, #19
 80014de:	6922      	ldr	r2, [r4, #16]
 80014e0:	6022      	str	r2, [r4, #0]
 80014e2:	d504      	bpl.n	80014ee <__sflush_r+0x7a>
 80014e4:	1c42      	adds	r2, r0, #1
 80014e6:	d101      	bne.n	80014ec <__sflush_r+0x78>
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	b903      	cbnz	r3, 80014ee <__sflush_r+0x7a>
 80014ec:	6560      	str	r0, [r4, #84]	; 0x54
 80014ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014f0:	602f      	str	r7, [r5, #0]
 80014f2:	2900      	cmp	r1, #0
 80014f4:	d0ca      	beq.n	800148c <__sflush_r+0x18>
 80014f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014fa:	4299      	cmp	r1, r3
 80014fc:	d002      	beq.n	8001504 <__sflush_r+0x90>
 80014fe:	4628      	mov	r0, r5
 8001500:	f7ff fbe8 	bl	8000cd4 <_free_r>
 8001504:	2000      	movs	r0, #0
 8001506:	6360      	str	r0, [r4, #52]	; 0x34
 8001508:	e7c1      	b.n	800148e <__sflush_r+0x1a>
 800150a:	2301      	movs	r3, #1
 800150c:	4628      	mov	r0, r5
 800150e:	47b0      	blx	r6
 8001510:	1c41      	adds	r1, r0, #1
 8001512:	d1c8      	bne.n	80014a6 <__sflush_r+0x32>
 8001514:	682b      	ldr	r3, [r5, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0c5      	beq.n	80014a6 <__sflush_r+0x32>
 800151a:	2b1d      	cmp	r3, #29
 800151c:	d001      	beq.n	8001522 <__sflush_r+0xae>
 800151e:	2b16      	cmp	r3, #22
 8001520:	d101      	bne.n	8001526 <__sflush_r+0xb2>
 8001522:	602f      	str	r7, [r5, #0]
 8001524:	e7b2      	b.n	800148c <__sflush_r+0x18>
 8001526:	89a3      	ldrh	r3, [r4, #12]
 8001528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800152c:	81a3      	strh	r3, [r4, #12]
 800152e:	e7ae      	b.n	800148e <__sflush_r+0x1a>
 8001530:	690f      	ldr	r7, [r1, #16]
 8001532:	2f00      	cmp	r7, #0
 8001534:	d0aa      	beq.n	800148c <__sflush_r+0x18>
 8001536:	0793      	lsls	r3, r2, #30
 8001538:	680e      	ldr	r6, [r1, #0]
 800153a:	bf08      	it	eq
 800153c:	694b      	ldreq	r3, [r1, #20]
 800153e:	600f      	str	r7, [r1, #0]
 8001540:	bf18      	it	ne
 8001542:	2300      	movne	r3, #0
 8001544:	1bf6      	subs	r6, r6, r7
 8001546:	608b      	str	r3, [r1, #8]
 8001548:	2e00      	cmp	r6, #0
 800154a:	dd9f      	ble.n	800148c <__sflush_r+0x18>
 800154c:	6a21      	ldr	r1, [r4, #32]
 800154e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001552:	4633      	mov	r3, r6
 8001554:	463a      	mov	r2, r7
 8001556:	4628      	mov	r0, r5
 8001558:	47e0      	blx	ip
 800155a:	2800      	cmp	r0, #0
 800155c:	dc06      	bgt.n	800156c <__sflush_r+0xf8>
 800155e:	89a3      	ldrh	r3, [r4, #12]
 8001560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001564:	81a3      	strh	r3, [r4, #12]
 8001566:	f04f 30ff 	mov.w	r0, #4294967295
 800156a:	e790      	b.n	800148e <__sflush_r+0x1a>
 800156c:	4407      	add	r7, r0
 800156e:	1a36      	subs	r6, r6, r0
 8001570:	e7ea      	b.n	8001548 <__sflush_r+0xd4>
 8001572:	bf00      	nop
 8001574:	dfbffffe 	.word	0xdfbffffe

08001578 <_fflush_r>:
 8001578:	b538      	push	{r3, r4, r5, lr}
 800157a:	690b      	ldr	r3, [r1, #16]
 800157c:	4605      	mov	r5, r0
 800157e:	460c      	mov	r4, r1
 8001580:	b913      	cbnz	r3, 8001588 <_fflush_r+0x10>
 8001582:	2500      	movs	r5, #0
 8001584:	4628      	mov	r0, r5
 8001586:	bd38      	pop	{r3, r4, r5, pc}
 8001588:	b118      	cbz	r0, 8001592 <_fflush_r+0x1a>
 800158a:	6a03      	ldr	r3, [r0, #32]
 800158c:	b90b      	cbnz	r3, 8001592 <_fflush_r+0x1a>
 800158e:	f7ff f985 	bl	800089c <__sinit>
 8001592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f3      	beq.n	8001582 <_fflush_r+0xa>
 800159a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800159c:	07d0      	lsls	r0, r2, #31
 800159e:	d404      	bmi.n	80015aa <_fflush_r+0x32>
 80015a0:	0599      	lsls	r1, r3, #22
 80015a2:	d402      	bmi.n	80015aa <_fflush_r+0x32>
 80015a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015a6:	f7ff fb75 	bl	8000c94 <__retarget_lock_acquire_recursive>
 80015aa:	4628      	mov	r0, r5
 80015ac:	4621      	mov	r1, r4
 80015ae:	f7ff ff61 	bl	8001474 <__sflush_r>
 80015b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80015b4:	07da      	lsls	r2, r3, #31
 80015b6:	4605      	mov	r5, r0
 80015b8:	d4e4      	bmi.n	8001584 <_fflush_r+0xc>
 80015ba:	89a3      	ldrh	r3, [r4, #12]
 80015bc:	059b      	lsls	r3, r3, #22
 80015be:	d4e1      	bmi.n	8001584 <_fflush_r+0xc>
 80015c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015c2:	f7ff fb68 	bl	8000c96 <__retarget_lock_release_recursive>
 80015c6:	e7dd      	b.n	8001584 <_fflush_r+0xc>

080015c8 <fiprintf>:
 80015c8:	b40e      	push	{r1, r2, r3}
 80015ca:	b503      	push	{r0, r1, lr}
 80015cc:	4601      	mov	r1, r0
 80015ce:	ab03      	add	r3, sp, #12
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <fiprintf+0x20>)
 80015d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80015d6:	6800      	ldr	r0, [r0, #0]
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	f7ff fca1 	bl	8000f20 <_vfiprintf_r>
 80015de:	b002      	add	sp, #8
 80015e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80015e4:	b003      	add	sp, #12
 80015e6:	4770      	bx	lr
 80015e8:	2000009c 	.word	0x2000009c

080015ec <__swhatbuf_r>:
 80015ec:	b570      	push	{r4, r5, r6, lr}
 80015ee:	460c      	mov	r4, r1
 80015f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015f4:	2900      	cmp	r1, #0
 80015f6:	b096      	sub	sp, #88	; 0x58
 80015f8:	4615      	mov	r5, r2
 80015fa:	461e      	mov	r6, r3
 80015fc:	da0d      	bge.n	800161a <__swhatbuf_r+0x2e>
 80015fe:	89a3      	ldrh	r3, [r4, #12]
 8001600:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001604:	f04f 0100 	mov.w	r1, #0
 8001608:	bf0c      	ite	eq
 800160a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800160e:	2340      	movne	r3, #64	; 0x40
 8001610:	2000      	movs	r0, #0
 8001612:	6031      	str	r1, [r6, #0]
 8001614:	602b      	str	r3, [r5, #0]
 8001616:	b016      	add	sp, #88	; 0x58
 8001618:	bd70      	pop	{r4, r5, r6, pc}
 800161a:	466a      	mov	r2, sp
 800161c:	f000 f87c 	bl	8001718 <_fstat_r>
 8001620:	2800      	cmp	r0, #0
 8001622:	dbec      	blt.n	80015fe <__swhatbuf_r+0x12>
 8001624:	9901      	ldr	r1, [sp, #4]
 8001626:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800162a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800162e:	4259      	negs	r1, r3
 8001630:	4159      	adcs	r1, r3
 8001632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001636:	e7eb      	b.n	8001610 <__swhatbuf_r+0x24>

08001638 <__smakebuf_r>:
 8001638:	898b      	ldrh	r3, [r1, #12]
 800163a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800163c:	079d      	lsls	r5, r3, #30
 800163e:	4606      	mov	r6, r0
 8001640:	460c      	mov	r4, r1
 8001642:	d507      	bpl.n	8001654 <__smakebuf_r+0x1c>
 8001644:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001648:	6023      	str	r3, [r4, #0]
 800164a:	6123      	str	r3, [r4, #16]
 800164c:	2301      	movs	r3, #1
 800164e:	6163      	str	r3, [r4, #20]
 8001650:	b002      	add	sp, #8
 8001652:	bd70      	pop	{r4, r5, r6, pc}
 8001654:	ab01      	add	r3, sp, #4
 8001656:	466a      	mov	r2, sp
 8001658:	f7ff ffc8 	bl	80015ec <__swhatbuf_r>
 800165c:	9900      	ldr	r1, [sp, #0]
 800165e:	4605      	mov	r5, r0
 8001660:	4630      	mov	r0, r6
 8001662:	f7ff fba9 	bl	8000db8 <_malloc_r>
 8001666:	b948      	cbnz	r0, 800167c <__smakebuf_r+0x44>
 8001668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800166c:	059a      	lsls	r2, r3, #22
 800166e:	d4ef      	bmi.n	8001650 <__smakebuf_r+0x18>
 8001670:	f023 0303 	bic.w	r3, r3, #3
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	81a3      	strh	r3, [r4, #12]
 800167a:	e7e3      	b.n	8001644 <__smakebuf_r+0xc>
 800167c:	89a3      	ldrh	r3, [r4, #12]
 800167e:	6020      	str	r0, [r4, #0]
 8001680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001684:	81a3      	strh	r3, [r4, #12]
 8001686:	9b00      	ldr	r3, [sp, #0]
 8001688:	6163      	str	r3, [r4, #20]
 800168a:	9b01      	ldr	r3, [sp, #4]
 800168c:	6120      	str	r0, [r4, #16]
 800168e:	b15b      	cbz	r3, 80016a8 <__smakebuf_r+0x70>
 8001690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001694:	4630      	mov	r0, r6
 8001696:	f000 f851 	bl	800173c <_isatty_r>
 800169a:	b128      	cbz	r0, 80016a8 <__smakebuf_r+0x70>
 800169c:	89a3      	ldrh	r3, [r4, #12]
 800169e:	f023 0303 	bic.w	r3, r3, #3
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	81a3      	strh	r3, [r4, #12]
 80016a8:	89a3      	ldrh	r3, [r4, #12]
 80016aa:	431d      	orrs	r5, r3
 80016ac:	81a5      	strh	r5, [r4, #12]
 80016ae:	e7cf      	b.n	8001650 <__smakebuf_r+0x18>

080016b0 <_putc_r>:
 80016b0:	b570      	push	{r4, r5, r6, lr}
 80016b2:	460d      	mov	r5, r1
 80016b4:	4614      	mov	r4, r2
 80016b6:	4606      	mov	r6, r0
 80016b8:	b118      	cbz	r0, 80016c2 <_putc_r+0x12>
 80016ba:	6a03      	ldr	r3, [r0, #32]
 80016bc:	b90b      	cbnz	r3, 80016c2 <_putc_r+0x12>
 80016be:	f7ff f8ed 	bl	800089c <__sinit>
 80016c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016c4:	07d8      	lsls	r0, r3, #31
 80016c6:	d405      	bmi.n	80016d4 <_putc_r+0x24>
 80016c8:	89a3      	ldrh	r3, [r4, #12]
 80016ca:	0599      	lsls	r1, r3, #22
 80016cc:	d402      	bmi.n	80016d4 <_putc_r+0x24>
 80016ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016d0:	f7ff fae0 	bl	8000c94 <__retarget_lock_acquire_recursive>
 80016d4:	68a3      	ldr	r3, [r4, #8]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	60a3      	str	r3, [r4, #8]
 80016dc:	da05      	bge.n	80016ea <_putc_r+0x3a>
 80016de:	69a2      	ldr	r2, [r4, #24]
 80016e0:	4293      	cmp	r3, r2
 80016e2:	db12      	blt.n	800170a <_putc_r+0x5a>
 80016e4:	b2eb      	uxtb	r3, r5
 80016e6:	2b0a      	cmp	r3, #10
 80016e8:	d00f      	beq.n	800170a <_putc_r+0x5a>
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	6022      	str	r2, [r4, #0]
 80016f0:	701d      	strb	r5, [r3, #0]
 80016f2:	b2ed      	uxtb	r5, r5
 80016f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016f6:	07da      	lsls	r2, r3, #31
 80016f8:	d405      	bmi.n	8001706 <_putc_r+0x56>
 80016fa:	89a3      	ldrh	r3, [r4, #12]
 80016fc:	059b      	lsls	r3, r3, #22
 80016fe:	d402      	bmi.n	8001706 <_putc_r+0x56>
 8001700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001702:	f7ff fac8 	bl	8000c96 <__retarget_lock_release_recursive>
 8001706:	4628      	mov	r0, r5
 8001708:	bd70      	pop	{r4, r5, r6, pc}
 800170a:	4629      	mov	r1, r5
 800170c:	4622      	mov	r2, r4
 800170e:	4630      	mov	r0, r6
 8001710:	f7ff f9b3 	bl	8000a7a <__swbuf_r>
 8001714:	4605      	mov	r5, r0
 8001716:	e7ed      	b.n	80016f4 <_putc_r+0x44>

08001718 <_fstat_r>:
 8001718:	b538      	push	{r3, r4, r5, lr}
 800171a:	4d07      	ldr	r5, [pc, #28]	; (8001738 <_fstat_r+0x20>)
 800171c:	2300      	movs	r3, #0
 800171e:	4604      	mov	r4, r0
 8001720:	4608      	mov	r0, r1
 8001722:	4611      	mov	r1, r2
 8001724:	602b      	str	r3, [r5, #0]
 8001726:	f7fe ff7c 	bl	8000622 <_fstat>
 800172a:	1c43      	adds	r3, r0, #1
 800172c:	d102      	bne.n	8001734 <_fstat_r+0x1c>
 800172e:	682b      	ldr	r3, [r5, #0]
 8001730:	b103      	cbz	r3, 8001734 <_fstat_r+0x1c>
 8001732:	6023      	str	r3, [r4, #0]
 8001734:	bd38      	pop	{r3, r4, r5, pc}
 8001736:	bf00      	nop
 8001738:	20000200 	.word	0x20000200

0800173c <_isatty_r>:
 800173c:	b538      	push	{r3, r4, r5, lr}
 800173e:	4d06      	ldr	r5, [pc, #24]	; (8001758 <_isatty_r+0x1c>)
 8001740:	2300      	movs	r3, #0
 8001742:	4604      	mov	r4, r0
 8001744:	4608      	mov	r0, r1
 8001746:	602b      	str	r3, [r5, #0]
 8001748:	f7fe ff7a 	bl	8000640 <_isatty>
 800174c:	1c43      	adds	r3, r0, #1
 800174e:	d102      	bne.n	8001756 <_isatty_r+0x1a>
 8001750:	682b      	ldr	r3, [r5, #0]
 8001752:	b103      	cbz	r3, 8001756 <_isatty_r+0x1a>
 8001754:	6023      	str	r3, [r4, #0]
 8001756:	bd38      	pop	{r3, r4, r5, pc}
 8001758:	20000200 	.word	0x20000200

0800175c <_sbrk_r>:
 800175c:	b538      	push	{r3, r4, r5, lr}
 800175e:	4d06      	ldr	r5, [pc, #24]	; (8001778 <_sbrk_r+0x1c>)
 8001760:	2300      	movs	r3, #0
 8001762:	4604      	mov	r4, r0
 8001764:	4608      	mov	r0, r1
 8001766:	602b      	str	r3, [r5, #0]
 8001768:	f7fe ff80 	bl	800066c <_sbrk>
 800176c:	1c43      	adds	r3, r0, #1
 800176e:	d102      	bne.n	8001776 <_sbrk_r+0x1a>
 8001770:	682b      	ldr	r3, [r5, #0]
 8001772:	b103      	cbz	r3, 8001776 <_sbrk_r+0x1a>
 8001774:	6023      	str	r3, [r4, #0]
 8001776:	bd38      	pop	{r3, r4, r5, pc}
 8001778:	20000200 	.word	0x20000200

0800177c <abort>:
 800177c:	b508      	push	{r3, lr}
 800177e:	2006      	movs	r0, #6
 8001780:	f000 f82c 	bl	80017dc <raise>
 8001784:	2001      	movs	r0, #1
 8001786:	f7fe fefe 	bl	8000586 <_exit>

0800178a <_raise_r>:
 800178a:	291f      	cmp	r1, #31
 800178c:	b538      	push	{r3, r4, r5, lr}
 800178e:	4604      	mov	r4, r0
 8001790:	460d      	mov	r5, r1
 8001792:	d904      	bls.n	800179e <_raise_r+0x14>
 8001794:	2316      	movs	r3, #22
 8001796:	6003      	str	r3, [r0, #0]
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	bd38      	pop	{r3, r4, r5, pc}
 800179e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80017a0:	b112      	cbz	r2, 80017a8 <_raise_r+0x1e>
 80017a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80017a6:	b94b      	cbnz	r3, 80017bc <_raise_r+0x32>
 80017a8:	4620      	mov	r0, r4
 80017aa:	f000 f831 	bl	8001810 <_getpid_r>
 80017ae:	462a      	mov	r2, r5
 80017b0:	4601      	mov	r1, r0
 80017b2:	4620      	mov	r0, r4
 80017b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017b8:	f000 b818 	b.w	80017ec <_kill_r>
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d00a      	beq.n	80017d6 <_raise_r+0x4c>
 80017c0:	1c59      	adds	r1, r3, #1
 80017c2:	d103      	bne.n	80017cc <_raise_r+0x42>
 80017c4:	2316      	movs	r3, #22
 80017c6:	6003      	str	r3, [r0, #0]
 80017c8:	2001      	movs	r0, #1
 80017ca:	e7e7      	b.n	800179c <_raise_r+0x12>
 80017cc:	2400      	movs	r4, #0
 80017ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80017d2:	4628      	mov	r0, r5
 80017d4:	4798      	blx	r3
 80017d6:	2000      	movs	r0, #0
 80017d8:	e7e0      	b.n	800179c <_raise_r+0x12>
	...

080017dc <raise>:
 80017dc:	4b02      	ldr	r3, [pc, #8]	; (80017e8 <raise+0xc>)
 80017de:	4601      	mov	r1, r0
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	f7ff bfd2 	b.w	800178a <_raise_r>
 80017e6:	bf00      	nop
 80017e8:	2000009c 	.word	0x2000009c

080017ec <_kill_r>:
 80017ec:	b538      	push	{r3, r4, r5, lr}
 80017ee:	4d07      	ldr	r5, [pc, #28]	; (800180c <_kill_r+0x20>)
 80017f0:	2300      	movs	r3, #0
 80017f2:	4604      	mov	r4, r0
 80017f4:	4608      	mov	r0, r1
 80017f6:	4611      	mov	r1, r2
 80017f8:	602b      	str	r3, [r5, #0]
 80017fa:	f7fe feb4 	bl	8000566 <_kill>
 80017fe:	1c43      	adds	r3, r0, #1
 8001800:	d102      	bne.n	8001808 <_kill_r+0x1c>
 8001802:	682b      	ldr	r3, [r5, #0]
 8001804:	b103      	cbz	r3, 8001808 <_kill_r+0x1c>
 8001806:	6023      	str	r3, [r4, #0]
 8001808:	bd38      	pop	{r3, r4, r5, pc}
 800180a:	bf00      	nop
 800180c:	20000200 	.word	0x20000200

08001810 <_getpid_r>:
 8001810:	f7fe bea2 	b.w	8000558 <_getpid>

08001814 <_init>:
 8001814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001816:	bf00      	nop
 8001818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800181a:	bc08      	pop	{r3}
 800181c:	469e      	mov	lr, r3
 800181e:	4770      	bx	lr

08001820 <_fini>:
 8001820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001822:	bf00      	nop
 8001824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001826:	bc08      	pop	{r3}
 8001828:	469e      	mov	lr, r3
 800182a:	4770      	bx	lr
